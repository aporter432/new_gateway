events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Add resolver settings for Docker DNS
    resolver 127.0.0.11 valid=30s;
    resolver_timeout 10s;

    # Enhanced logging for debugging
    log_format detailed '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';

    server {
        listen 8080;
        server_name localhost;

        # CORS headers in separate location block for OPTIONS
        location = /api/auth/login {
            if ($request_method = 'OPTIONS') {
                # Handle preflight request with CORS headers
                add_header 'Access-Control-Allow-Origin' 'http://localhost:8081' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,RSC' always;
                add_header 'Access-Control-Max-Age' 1728000 always;
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                return 204;
            }

            # Pass to auth endpoint
            set $upstream_api ogx_gateway_api:8000;
            proxy_pass http://$upstream_api;

            # Standard headers
            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Remove duplicate CORS headers - FastAPI already sets them
        }

        # Specific route for /api/auth/me with CORS headers
        location = /api/auth/me {
            if ($request_method = 'OPTIONS') {
                # Handle preflight request with CORS headers
                add_header 'Access-Control-Allow-Origin' 'http://localhost:8081' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,RSC' always;
                add_header 'Access-Control-Max-Age' 1728000 always;
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                return 204;
            }

            # Pass to auth endpoint
            set $upstream_api ogx_gateway_api:8000;
            proxy_pass http://$upstream_api;

            # Standard headers
            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Pass CORS headers from upstream for actual response
            proxy_pass_header Access-Control-Allow-Origin;
            proxy_pass_header Access-Control-Allow-Methods;
            proxy_pass_header Access-Control-Allow-Headers;
            proxy_pass_header Access-Control-Allow-Credentials;
            proxy_pass_header Access-Control-Expose-Headers;
        }

        # Health check endpoint
        location /health {
            access_log off;
            add_header Content-Type text/plain;
            return 200 'healthy\n';
        }

        # Route to local API service - FIXED to retain /api prefix
        location /api/ {
            # Use variable for dynamic resolution
            set $upstream_api ogx_gateway_api:8000;

            # OPTIONS preflight handling
            if ($request_method = 'OPTIONS') {
                # Handle preflight request with CORS headers
                add_header 'Access-Control-Allow-Origin' 'http://localhost:8081' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,RSC' always;
                add_header 'Access-Control-Max-Age' 1728000 always;
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                return 204;
            }

            # Changed to not strip the /api prefix
            proxy_pass http://$upstream_api;

            proxy_http_version 1.1;
            proxy_buffering off;

            # Forward the original request headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Origin $http_origin;

            # Pass the original request method for CORS preflight
            proxy_set_header Access-Control-Request-Method $http_access_control_request_method;
            proxy_set_header Access-Control-Request-Headers $http_access_control_request_headers;

            # Improved auth handling
            proxy_set_header Authorization $http_authorization;
            proxy_pass_header Authorization;

            # Debug logging
            access_log /var/log/nginx/access.log detailed;
            error_log /var/log/nginx/error.log debug;

            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Pass CORS headers from upstream
            proxy_pass_header Access-Control-Allow-Origin;
            proxy_pass_header Access-Control-Allow-Methods;
            proxy_pass_header Access-Control-Allow-Headers;
            proxy_pass_header Access-Control-Allow-Credentials;
            proxy_pass_header Access-Control-Expose-Headers;
        }

        # Proxy all API requests - Updated to v1.0 to match OGx API
        location /api/v1.0/ {
            # OPTIONS preflight handling
            if ($request_method = 'OPTIONS') {
                return 204;
            }

            proxy_pass https://ogx.swlab.ca/api/v1.0/;

            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_ssl_server_name on;
            proxy_ssl_verify off;

            # Debug logging
            access_log /var/log/nginx/access.log detailed;
            error_log /var/log/nginx/error.log debug;

            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Headers
            proxy_set_header Host ogx.swlab.ca;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Improved auth handling
            proxy_set_header Authorization $http_authorization;
            proxy_pass_header Authorization;

            # Pass CORS headers from upstream
            proxy_pass_header Access-Control-Allow-Origin;
            proxy_pass_header Access-Control-Allow-Methods;
            proxy_pass_header Access-Control-Allow-Headers;
            proxy_pass_header Access-Control-Allow-Credentials;
            proxy_pass_header Access-Control-Expose-Headers;
        }

        # Proxy docs requests
        location /docs/ {
            # OPTIONS preflight handling
            if ($request_method = 'OPTIONS') {
                return 204;
            }

            proxy_pass https://ogx.swlab.ca/docs/;

            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_ssl_server_name on;
            proxy_ssl_verify off;

            # Debug logging
            access_log /var/log/nginx/access.log detailed;
            error_log /var/log/nginx/error.log debug;

            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Headers
            proxy_set_header Host ogx.swlab.ca;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Improved auth handling
            proxy_set_header Authorization $http_authorization;
            proxy_pass_header Authorization;

            # CORS headers with specific origin
            add_header 'Access-Control-Allow-Origin' 'http://localhost:8081' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,RSC' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,RSC,Next-Router-State-Tree,Next-Router-Prefetch,Next-URL' always;
        }

        # Special handling for Next.js React Server Component requests
        location ~ /_next/data/ {
            # OPTIONS preflight handling
            if ($request_method = 'OPTIONS') {
                return 204;
            }

            set $upstream_ui ogx_gateway_ui:8081;
            proxy_pass http://$upstream_ui;

            proxy_http_version 1.1;
            proxy_buffering off;

            # Headers for RSC requests
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Debug logging
            access_log /var/log/nginx/access.log detailed;
            error_log /var/log/nginx/error.log debug;

            # CORS headers with specific origin
            add_header 'Access-Control-Allow-Origin' 'http://localhost:8081' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,RSC' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,RSC,Next-Router-State-Tree,Next-Router-Prefetch,Next-URL' always;
        }

        # New special location block for RSC queries
        location ~ /_rsc/ {
            set $upstream_ui ogx_gateway_ui:8081;
            proxy_pass http://$upstream_ui;

            proxy_http_version 1.1;
            proxy_buffering off;

            # Headers for RSC requests
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Improved for RSC
            proxy_set_header RSC 1;
            proxy_pass_header RSC;

            # Debug logging
            access_log /var/log/nginx/access.log detailed;
            error_log /var/log/nginx/error.log debug;

            # CORS headers with specific origin
            add_header 'Access-Control-Allow-Origin' 'http://localhost:8081' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,RSC' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,RSC,Next-Router-State-Tree,Next-Router-Prefetch,Next-URL' always;
        }

        # Single root location that handles both static content and RSC requests
        location / {
            # OPTIONS preflight handling
            if ($request_method = 'OPTIONS') {
                return 204;
            }

            # Use variable for dynamic resolution
            set $upstream_ui ogx_gateway_ui:8081;

            # Special handling for RSC requests (detected by query param)
            if ($args ~ "_rsc=") {
                # Set special RSC headers - only add_header works in if blocks
                add_header RSC 1 always;
            }

            # Moved outside the if block - set for all requests
            # RSC header will only matter for RSC requests
            proxy_set_header RSC 1;

            # Proxy to UI service
            proxy_pass http://$upstream_ui;

            proxy_http_version 1.1;
            proxy_buffering off;

            # Debug logging
            access_log /var/log/nginx/access.log detailed;
            error_log /var/log/nginx/error.log debug;

            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket support for Next.js
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # CORS headers with specific origin
            add_header 'Access-Control-Allow-Origin' 'http://localhost:8081' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,RSC' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,RSC,Next-Router-State-Tree,Next-Router-Prefetch,Next-URL' always;
        }

        # Special location for dashboard pages with RSC query parameters
        location ~ ^/dashboard/([^/]+)$ {
            # Standard proxy settings for all requests
            set $upstream_ui ogx_gateway_ui:8081;
            proxy_pass http://$upstream_ui;

            proxy_http_version 1.1;
            proxy_buffering off;

            # Standard headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header RSC 1;
            proxy_pass_header RSC;

            # Conditional CORS headers for RSC requests
            if ($args ~ "_rsc=") {
                add_header 'Access-Control-Allow-Origin' 'http://localhost:8081' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,RSC,Next-Router-State-Tree,Next-Router-Prefetch' always;
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,RSC,Next-Router-State-Tree,Next-Router-Prefetch,Next-URL' always;
            }

            # Headers specific to RSC
            proxy_set_header Next-Router-Prefetch 1;
            proxy_set_header Next-Router-State-Tree 1;

            # Debug logging
            access_log /var/log/nginx/access.log detailed;
            error_log /var/log/nginx/error.log debug;
        }
    }
}
