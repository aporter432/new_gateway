services:
  # Main Gateway API Service
  ogx_gateway_api:
    build:
      context: .
      dockerfile: Dockerfile
      platforms:
        - linux/arm64
    container_name: ogx-gateway-api
    ports:
      - "8000:8000"
    volumes:
      - ./Protexis_Command:/app/Protexis_Command
      - ./tests:/app/tests:ro
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@ogx_gateway_db:5432/new_gateway
      - REDIS_HOST=ogx_gateway_redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - OGx_BASE_URL=https://OGx.swlab.ca/api/v1.0
      - OGx_CLIENT_ID=70000934
      - OGx_CLIENT_SECRET=password
      - CUSTOMER_ID=test_customer
      - LOG_LEVEL=debug
      - ENVIRONMENT=development
      - no_proxy=localhost,127.0.0.1,ogx_gateway_db,ogx_gateway_redis,ogx_gateway_aws_mock
    depends_on:
      ogx_gateway_db:
        condition: service_healthy
      ogx_gateway_redis:
        condition: service_healthy
      ogx_gateway_aws_mock:
        condition: service_healthy
    networks:
      - gateway_net
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8000/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: [ "poetry", "run", "uvicorn", "Protexis_Command.main:app", "--host", "0.0.0.0", "--port", "8000", "--log-level", "debug" ]
    dns:
      - 127.0.0.11
      - 8.8.8.8

  # Test Runner Service
  ogx_gateway_tests:
    build:
      context: .
      dockerfile: Dockerfile
      platforms:
        - linux/arm64
    container_name: ogx-gateway-tests
    volumes:
      - ./Protexis_Command:/app/Protexis_Command:ro
      - ./tests:/app/tests:ro
      - ./pyproject.toml:/app/pyproject.toml:ro
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@ogx_gateway_db:5432/new_gateway
      - REDIS_HOST=ogx_gateway_redis
      - REDIS_PORT=6379
      - REDIS_DB=15
      - OGx_BASE_URL=https://OGx.swlab.ca/api/v1.0
      - OGx_CLIENT_ID=70000934
      - OGx_CLIENT_SECRET=password
      - CUSTOMER_ID=test_customer
      - PYTEST_ADDOPTS="--tb=short"
    working_dir: /app
    command: poetry run pytest tests/integration/api/auth --ignore=tests/integration/ui --ignore=tests/integration/scenarios -v
    depends_on:
      ogx_gateway_redis:
        condition: service_healthy
      ogx_gateway_db:
        condition: service_healthy
    networks:
      - gateway_net
    dns:
      - 127.0.0.11
      - 8.8.8.8

  # UI Service
  ogx_gateway_ui:
    build:
      context: ./Protexis_Command/protexis_ui
      dockerfile: UI.Dockerfile
      platforms:
        - linux/arm64
    container_name: ogx-gateway-ui
    ports:
      - "3001:3001"
    volumes:
      - ./Protexis_Command/protexis_ui/src:/app/src:rw
      - ./Protexis_Command/protexis_ui/.next:/app/.next:rw
      - ./Protexis_Command/protexis_ui/node_modules:/app/node_modules:rw
      - ./Protexis_Command/protexis_ui/public:/app/public:rw
      - ./Protexis_Command/protexis_ui/tsconfig.json:/app/tsconfig.json:ro
      - ./Protexis_Command/protexis_ui/next.config.js:/app/next.config.js:ro
    environment:
      - NODE_ENV=development
      - UI_PORT=3001
      - UI_HOST=0.0.0.0
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXT_PUBLIC_WS_URL=ws://localhost:8080
      - NEXT_TELEMETRY_DISABLED=1
      - UI_DEV_SERVER_PORT=3001
      - UI_METRICS_PORT=3002
      - UI_LOG_LEVEL=debug
      - UI_CORS_ORIGIN=http://localhost:3001
      - NEXT_PUBLIC_BACKEND_URL=http://localhost:8080
    depends_on:
      ogx_gateway_api:
        condition: service_healthy
    networks:
      - gateway_net
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3001/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: npm run dev

  # Database Service
  ogx_gateway_db:
    image: postgres:14-alpine
    platform: linux/arm64
    container_name: ogx-gateway-db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=new_gateway
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - gateway_net

  # Cache Service
  ogx_gateway_redis:
    image: redis:7-alpine
    platform: linux/arm64
    container_name: ogx-gateway-redis
    ports:
      - "6379:6379"
    command: redis-server --loglevel debug --notify-keyspace-events AKE --save 60 1 --appendonly yes --set-proc-title yes
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - gateway_net
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Mock AWS Services
  ogx_gateway_aws_mock:
    image: localstack/localstack:1.4
    platform: linux/arm64
    container_name: ogx-gateway-aws-mock
    ports:
      - "4566:4566"
    environment:
      - SERVICES=sqs,dynamodb,cloudwatch
      - DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - DOCKER_HOST=unix:///var/run/docker.sock
      - HOSTNAME_EXTERNAL=ogx_gateway_aws_mock
      - PERSISTENCE=0
      - DEBUG=1
      - LS_LOG=trace
      - EAGER_SERVICE_LOADING=1
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:4566/_localstack/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Metrics Service
  ogx_gateway_prometheus:
    image: prom/prometheus:latest
    platform: linux/arm64
    container_name: ogx-gateway-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro

  # API Proxy Service
  ogx_gateway_proxy:
    image: nginx:alpine
    container_name: ogx-gateway-proxy
    ports:
      - "8080:8080"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - gateway_net
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1
    extra_hosts:
      - "ogx.swlab.ca:34.235.40.227"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres_data:
  redis_data:


networks:
  gateway_net:
    name: gateway_net
