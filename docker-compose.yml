version: '3.8'

services:
  # API Proxy for OGWS
  proxy:
    image: nginx:alpine
    container_name: new_gateway-proxy
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8080:8080"
    networks:
      - gateway_net

  # Main Gateway Application
  app:
    build: .
    container_name: new_gateway-app
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src:ro
      - ./tests:/app/tests:ro
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/new_gateway
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - OGWS_BASE_URL=http://proxy:8080/api/v1.0
      - OGWS_CLIENT_ID=70000934
      - OGWS_CLIENT_SECRET=password
      - CUSTOMER_ID=test_customer
      - HTTP_PROXY=http://proxy:8888
      - HTTPS_PROXY=http://proxy:8888
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_healthy
    networks:
      - gateway_net
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Test Runner Service
  test:
    build: .
    container_name: new_gateway-test
    volumes:
      - ./src:/app/src:ro
      - ./tests:/app/tests:ro
      - ./pyproject.toml:/app/pyproject.toml:ro
    environment:
      - PYTHONPATH=/app/src
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=15
      - OGWS_BASE_URL=http://proxy:8080/api/v1.0
      - OGWS_CLIENT_ID=70000934
      - OGWS_CLIENT_SECRET=password
      - CUSTOMER_ID=test_customer
      - HTTP_PROXY=http://proxy:8888
      - HTTPS_PROXY=http://proxy:8888
    working_dir: /app
    command: python -m pytest tests/integration --ignore=tests/integration/ui --ignore=tests/integration/scenarios -v
    depends_on:
      redis:
        condition: service_healthy
      proxy:
        condition: service_healthy
    networks:
      - gateway_net

  # PostgreSQL Database
  db:
    image: postgres:14-alpine
    container_name: new_gateway-db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=new_gateway
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: new_gateway-redis
    ports:
      - "6379:6379"
    command: redis-server --loglevel debug --notify-keyspace-events AKE --save 60 1 --appendonly yes --set-proc-title yes
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - gateway_net
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # LocalStack for AWS Services
  localstack:
    image: localstack/localstack:1.4
    container_name: new_gateway-localstack
    ports:
      - "4566:4566"
    environment:
      - SERVICES=sqs,dynamodb,cloudwatch
      - DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - DOCKER_HOST=unix:///var/run/docker.sock
      - HOSTNAME_EXTERNAL=localstack
      - PERSISTENCE=0
      - DEBUG=1
      - LS_LOG=trace
      - EAGER_SERVICE_LOADING=1
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:4566/_localstack/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: new_gateway-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Grafana for Monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: new_gateway-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      prometheus:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  gateway_net:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
