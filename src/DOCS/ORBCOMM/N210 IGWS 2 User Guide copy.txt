lsatData Pro Gateway Web Service 2 User Guide
N210, Version 03 Jun 2020
� ORBCOMM�

LEGAL NOTICE
This documentation is owned by ORBCOMM� and protected by applicable copyright laws and international treaty provisions. Other copyrighted names used are the property of their respective owners. Therefore, you must treat this documentation like any other copyrighted material. This publication, or any part thereof, may not be reproduced or transmitted in any form or by any means, electronic or mechanical, including photocopying, recording, storage in an information retrieval system, or otherwise, without prior written permission by ORBCOMM, Inc. 395 W Passaic Street, Suite 325, Rochelle Park, NJ 07662 USA Phone 703-433-6325. The information in this document is for information purposes only and contains technical information and descriptions of the ORBCOMM product(s) and is subject to change without notice. No warranty or representation, express or implied, is made with respect to its contents.

TRADEMARK NOTICE
The ORBCOMM name and the ORBCOMM logo are registered trademarks of ORBCOMM.
Microsoft and Windows are either registered trademarks or trademarks of Microsoft Corporation in the United States and/or other countries.
INMARSAT, the lnmarsat logo and lsatData Pro are trademarks of lnmarsat used under license by Skywave (an ORBCOMM company). lnmarsat is not responsible for the operation and regulatory compliance of the products and services referred to in this document that connect to the lnmarsat system.
EXPORT CONTROL STATEMENT
The contents of this document, in whole or in part, shall not be exported from the United States, which export shall include, but not be limited to, transmittal to any non-U.S. citizen wherever said person is located, except in accordance with all United States laws and regulations relating to exports and to all administrative acts of the U.S. Government pursuant to such laws and regulations. Diversion, re-export or transshipment of the contents of this document, in whole or in part, contrary to U.S. law is also strictly prohibited.
N210, Version 03 ~RBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
CONTACT INFORMATION Visit ORBCOMM Online
www.ORBCOMM.com
Contact Customer Support
support@skywave.com +1.613.836.2222
Headquarters
395 W Passaic Street, Suite 325 Rochelle Park, NJ 07662 USA Tel : +1-703-433-6300 Fax: 1-703-433-6400 Email: sales@orbcomm.com

N210, Version 03 ~RBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020


TABLE OF CONTENTS
Legal Notice . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 Tradeinark Notice . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 Export Control Statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 Contact lnfonnation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 Contact Customer Support ........................................................................... 3 TABLE OF CONTENTS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 List ofFigures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 List ofTables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
Preface ............................................................................................................. 9
Purpose ................................................................................................... 9 Errata Sheet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9 Notation .................................................................................................. 9 Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9 1 Introduction ...................................................................................................... 10 2 overview .........................................................................................................11
2.1 Terminals ............................................................................................. 12
2.1.1 Low Power Mode ................................................................................ 12
2.2 Gateway Accounts .................................................................................... 12 3 The IGWS 2 Protocol ............................................................................................. 15
3.1 Submit Messages .................................................................................... 16
3.1.1 Submit Messages to Terminals in Low Power Mode ............................................ 17
3.1 .2 Message Timeout ................................................................................17
3.2 Get From-Mobile Messages ..........................................................................17
3.2.1 IGWS 2 Client Application Guidelines ............................................................18
3.3 Message Retention and Limitations ..................................................................19
3.3.1 Firewall Limits .................................................................................... 19
3.3.2 Call Frequency Limits ............................................................................19
3.3.3 Message Submission and Retrieval Count Limits ................................................20
3.3.4 Time Stamp Values ............................................................................... 20
3.4 Interface Changes ....................................................................................21 4 Web ServiceApplication Programming Interface ................................................................22
4.1 Get Operations ........................................................................................ 22
4.1.1 GetBroadcastlnfos ............................................................................... 22
4.1.2 GetForwardMessages ............................................................................ 23
4.1.3 GetForwardStatuses ............................................................................. 23
4.1.4 GetReturnMessages ..............................................................................23
0 N210, Version 03 :RBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
4.1.5 GetSubaccountsReturnMessages ................................................................ 23
4.1.6 GetSubaccountlnfos ............................................................................. 24
4.1.7 GetTerminalslnfo .................................................................................24
4.2 Information Operations ...............................................................................24
4.2.1 IGWSlnformation .................................................................................24
4.3 Submit Operations .................................................................................... 25
4.3.1 SubmitForwardMessages ........................................................................26
4.3.2 SubmitForwardMessageToMultipleDestinations ................................................26
4.3.3 SubmitMessageCancelations ....................................................................27 5 Common Message Fonnat .......................................................................................28
5.1 Common Message Fields ............................................................................ 29
5.1.1 Common Message Example .....................................................................30 6 Classes ...........................................................................................................32
6.1 Get Classes ...........................................................................................32
6.2 Information Classes ..................................................................................33
6.3 Submission Classes ..................................................................................36 7 REST Web Service Interface ......................................................................................41
7.1 igws_information ..................................................................................... 41
7.2 get_subaccounLinfo ................................................................................. 43 7.3 get_broadcasLinfo ...................................................................................44
7.4 get_terminalsJnfo ....................................................................................46
7.5 get_return_messages .................................................................................47
7.6 geLsubaccountsJeturn_messages .................................................................. 51
7.7 get_forward_statuses .................................................................................53 7.8 get_forward_messages ............................................................................... 55
7.9 submiLmessages .................................................................................... 59
7.10 submiLmessage_to_destinations ................................................................... 62 7.11 submiLcancelations ................................................................................ 64 8 Using IGWS 2 -SOAP Client Code Snippets in C# ...............................................................67
8.1 Create aWeb Service Proxy Instance and Set the URL ............................................... 67
8.2 Retrieve Account Information ........................................................................ 68
8.3 Query for To-Mobile Message Status Changes ...................................................... 70
8.4 Poll for From-Mobile Messages ......................................................................72
8.5 Poll for Subaccounts' From-Mobile Messages ....................................................... 74
8.6 Submit a To-Mobile Message ........................................................................ 77 9 Using IGWS 2 -REST Client Code Snippets in C# ................................................................81
9.1 Data Classes ..........................................................................................81
9.2 Retrieve From-Mobile Messages ..................................................................... 82
N210, Version 03 :RBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
10 Using IGWS 2 -SOAP Client Code Snippets in Java ............................................................84
10.1 Create aWeb Service Proxy Instance and Set the URL ..............................................84
10.2 Retrieve Account Information .......................................................................85
10.3 Query for To-Mobile Message Status Changes .....................................................88
10.4 Poll for From-Mobile Messages .................................................................... 89
10.5 Poll for Subaccounts' From-Mobile Messages .....................................................90
10.6 Submit a To-Mobile Message .......................................................................92 11 Using IGWS 2 -REST Client Code Snippets in Java ............................................................97
11.1 Data Classes ........................................................................................ 97
11.2 Retrieving From-Mobile Messages ................................................................100 APPENDIX A Tutorial -SOAP Based Web Service ...............................................................103
A.1 Getting Started ......................................................................................103
A.2 Required Materials .................................................................................. 103
A.3 Create and Configure a New Project ................................................................ 103 APPENDIX B Common IGWS Error Codes ....................................................................... 107 APPENDIX C Interface Test System .............................................................................. 110 APPENDIX D Sample SOAP Web Service Client Application Code in C# ........................................111 APPENDIX E Sample REST Web Service Client in C# ............................................................122 APPENDIX F Sample SOAP Web Service Client Application in Java .............................................125 APPENDIX G Sample REST Web Service Client in Java ..........................................................138 APPENDIX H Interface Code Description ........................................................................145 C# .NET SOAP Client Sample ...........................................................................145 Java SOAP Client Sample ...............................................................................145 APPENDIX I Common Issues ....................................................................................147 APPENDIX J Web Seivice Interface Changes Between IGWS and IGWS 2 ....................................... 148 Acronyms Glossary ...............................................................................................149
N210, Version 03 :RBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020

LIST OF FIGURES
Figure 1: Gateway Interface .......................................................................................10 Figure 2: IGWS 2 in the Context of the Network ..................................................................11 Figure 3: Multiple Clients .........................................................................................11 Figure 4: Mobile and Subaccount IDs ............................................................................7 3 Figure 5: Subaccounts Relationship .............................................................................14 Figure 6: Overview of IGWS 2 .....................................................................................16 Figure 7: Submit Messages ......................................................................................17 Figure 8: Getting Messages ...................................................................................... 18 Figure 9: Gateway Interface ....................................................................................... 22 Figure 7 O: Message States ....................................................................................... 25 Figure 71: Common Message Format ........................................................................... 28 Figure 12: Get Classes ............................................................................................ 32 Figure 13: Information Classes ...................................................................................33 Figure 14: Message Submission Classes ........................................................................36 Figure 15: To-Mobile Message Related Classes ..................................................................37 Figure 16: New Visual Studio Project ...........................................................................704 Figure 17: Add a Service Reference ............................................................................. 704 Figure 18: Service Reference Settings .......................................................................... 7 05 Figure 19: Enter the URL ........................................................................................ 105 Figure 20: IGWS 2 Sample Code ................................................................................106
N270, Version 03 ~RBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020

LIST OF TABLES
Table 1: lsatData Pro Wake-up Periods ...........................................................................12 Table 2: Message States ..........................................................................................26 Table 3: Common Message Fields ...............................................................................29 Table 4: Common Characters ....................................................................................30
N210, Version 03 ~RBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
PREFACE
Purpose
This document provides an overview of the lsatData Pro Gateway Web Service 2 (IGWS 2) for developers as well as defines the IGWS 2 interface for both terminal and modem users.

Errata Sheet
Refer to the Support website for any updates or a possible Errata Sheet available after the release of this document. Always check the website for the most current documentation releases or release notes.

Notation
lsatData Pro Gateway Web Service 2 is platform independent. Many code examples in this document are in C# for Microsoft� .NET Framework 4.5 or higher using Microsoft� Visual Studio� 2015.
A forward (to-mobile) message is a message sent to the terminal from the gateway, while a return (from-mobile) message, or return link, is one sent from the terminal.
Content in this document applies to both terminal and modem users unless noted otherwise.

Reference
It is recommended that you be familiar with the content of the following documents before using this guide. These documents are available from the ORBCOMM Developer Toolkit or from the Customer Support website.
Document names and numbers are subject to change, or be discontinued, without notice.
[N200]  lsatData Pro Network Services Overview
[N206]  MTWS Cellular Protocol
[T202]  IDP Terminal API Reference
[T203]  IDP Modem Developer Guide
[T403]  AT Interface Developer Guide
[T405]  lsatData Pro Service API Ref FW v3 .x

Please refer to the embedded help file in each of the following software tools for additional information . These tools are available from the ORBCOMM Developer Toolkit.
� Developer Studio
N210, Version 03 ~RBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020

1 INTRODUCTION
The lsatData Pro network provides messaging services between terminals and an Internet application. This document defines the lsatData Pro Gateway Web Service 2 (IGWS 2) protocol, which customers can use to submit and retrieve messages to and from their terminals from their Internet application.
IGWS 2 supports both the SOAP and the RESTful style of web services and is therefore platform and language�independent allowing for easy integration with a customer's back-office system.
SOAP based web service describes its interfaces in enough detail to enable a user to build a client application to talk to it. This description is provided in an XML document called a Web Services Description Language (WSDL) file.
The WSDL file describes the complete contract for application communication. SOAP based web service makes Web services widely approachable by using WSDL definitions to generate code that knows precisely how to interact with the Web service described and hides tedious details in sending and receiving SOAP messages over different protocols.
A RESTful web service is a simple web service implemented using HTTP and the principles of REST. RESTful applications use HTTP requests to post data (create and/or update), read data (for example, make queries), and delete data. It is particularly useful for limited-profile devices such as PDAs and mobile phones, for which the overhead of headers and additional layers of SOAP elements on the XML payload must be restricted.
The IGWS 2 supports both JSON and XML encoding with its REST interface.
This document describes mostly the SOAP based web service and data structures provided by it. Section 7 describes the REST based web service. Data structures exchanged by the REST web service are the same as for SOAP.
Modem messages are described in [T203).
Figure 1 : Gateway Interface
Client Applications IGWS 2 Interface
r



lil~�i~


, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 10

2 OVERVIEW
Figure 2 shows the position of IGWS 2 in the message chain .
Figure 2: IGWS 2 in the Context of the Network
Customer's Servers/ server applications lsatData Pro Gateway

End user applications talking to customer's back office servers
End user applications

IGWS 2
End user applications talking directly to the
web service
Applications range from a back-office server exchanging messages with the web service and providing messages to its own client applications, to desktop/mobile applications talking directly to the web service.
Multiple clients can access the same account on the Gateway. Any Gateway account restrictions such as polling, or submission rates apply to the account; not to the client.
Figure 3: Multiple Clients
Customer

Mobile 1
Server 1
J
/ Mobile2
rGateway account AccesslD: 60001
~.
Server 2
"' Mobile3
7 ~
Desktop appllcatlo~~
AccesslD: 60001 Gateway Web Service
Each client must maintain its own high watermark to extract messages in sequence. The Gateway uses high�watermarks to return the latest messages to client applications. Along with the latest messages, the Gateway returns the next high watermark. The client must save this high watermark and use it for future access.
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
2.1 Terminals
A terminal must be activated in order send and receive messages. Terminals can be activated using the Customer Support website (support.skywave.com). A terminal can only be activated on a single Gateway account.
2.1.1 Low Power Mode
Terminals can be configured for low power operation. When a terminal is configured for low power, it spends most of the time in a sleep state and awakens when required to check for to-mobile messages, to send scheduled from�mobile reports, or in response to status changes on its various inputs. On wake up, the terminal receives any waiting to-mobile messages and remains awake until these messages have finished processing. The terminal's low power configuration is stored by the Gateway. If the terminal is configured for low power, the Gateway stores all to-mobile messages and delivers them when it knows the terminal is awake.
The wake-up period can be configured both over-the-air (OTA) and locally at the terminal. To change the wake-up period OTA the application must send an UpdateSleepSchedule system message. It is the application's responsibility to ensure that the terminal receives and acknowledges the messages. If the terminal does not respond, the application must resend the message. When the wake-up period is changed locally at the terminal, the terminal transmits a ResponseSleepSchedule message. The Gateway sends the message to the application and it uses this message to set the wake-up period for the terminal. To ensure the terminal and Gateway stay synchronized, the system registration message also contains the wake-up interval.
Table 1 outlines the wake-up periods supported by lsatData Pro. Although the application can configure the wake-up period, the terminal's wake-up time is selected based on its mobile ID.
Table 1: lsatData Pro Wake-up Periods
Value  Wake-up Period
0  5 second receives
1  30 second receives
2  1-minute receives
3  3 minute receives
4  10 minute receives
5  30 minute receives
6  60 minute receives
7  2 minute receives
8  5 minute receives
9  15 minute receives
10  20 minute receives

Refer to [T203] for more details about system messages to configure the wake-up interval.


2.2 Gateway Accounts
Every Gateway customer has an account on the Gateway (Figure 4) made up of the following:
�
Credentials in the form of access ID/password pair

�
Set of mobile IDs

�
Set of broadcast IDs


, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
12
�
Set of subaccount IDs

�
Message definitions


Message definitions are used by the Gateway to encode to-mobile message payloads and decode from-mobile
message payloads. This allows bit-efficient transport of data over the lsatData Pro satellite network but allows
the Gateway to present an interface that consists of named fields of various data types.
Message definition files are created using the Developer Studio tool found in the ORBCOMM Developer Toolkit.
Upload and manage the message definition file from the Customer Support website (Online Utilities link) if you want the Gateway to decode your messages. If the Manage Message Definition Files option is not available, contact Customer Support for assistance.
A Gateway customer can:
�
Send messages to terminals associated with its account or subaccounts.

�
Broadcast messages to groups of terminals represented by a broadcast ID associated with its account or sub accounts.

�
Retrieve messages from terminals associated with its account or subaccounts.


Figure 4: Mobile and Subaccount IDs
Gateway Account
Access ID/password Access limits Account information

A subaccount is a separate Gateway account (Figure 5), which a Gateway customer can access using their own access ID and password . If a Gateway account contains one or more subaccounts, clients accessing this account can send and receive messages to terminals belonging to other Gateway accounts (its subaccounts). The customer must explicitly provide the optional subaccount ID to send or receive messages to the subaccount's mobile IDs or broadcast IDs. For example, if account Bis not a subaccount of account A, clients accessing account A are unable to send receive messages to the mobile IDs or broadcast IDs of account B.


, JI:.\
N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
13
Gateway account

Access ID/password Access limits Account information

Figure 5: Subaccounts Relationship
Gateway account Access ID/password Access limns Account information

Gateway account

Access ID/password
Access limits Account information
Every subaccount ID points to another Gateway account with its own set of mobile IDs and broadcast IDs. A subaccount for one Gateway user could be the primary account for another Gateway user, that is a subaccount can have its own further subaccounts. An account with subaccount A does not inherit the subaccounts of account A A Gateway account can only send/receive messages to terminals belonging to itself or its subaccounts.
From-mobile message billing is done for the Gateway account to which the terminal belongs. If a message is sent from a terminal, the account where the terminal is activated is billed, regardless whether the from-mobile message was requested by a to-mobile message from a different account.
By default, to-mobile message billing is processed for the Gateway account to which the terminal belongs. Contact Customer Support if you want to change this billing behavior.
Account and subaccount IDs must be provisioned by Customer Support.
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
14
3 THE IGWS 2 PROTOCOL
The SOAP based IGWS 2 protocol is defined by its WSDL file. The WSDL can be obtained directly from IGWS 2. The URL of the IGWS 2 is
https:/ /isatdatapro.orbcomm .com/GLGW/2/Messages.svc
The WSDL file's URL is
https:/ / isatd ata pro.orbcom m .com/GLGW/2/Messages.svc?wsdI or https:/ /isatd atapro.orbcom m .com/GLGW/2/Messa g es.svc?singIeWsdI This file allows the software development tools to create proxy classes used to access the web service (refer to
APPENDIX A).
If http: is used, the access ID/password pair is sent as a clear text over the network. It is recommended you use the https: URL to communicate with the Gateway if security is a concern. Figure 6 describes the basics of IGWS 2. A typical client server application loads all relevant account information from
IGWS 2 when initialized, and it starts submitting messages and polling on regular intervals.
Note: IGWS 2 allows up to 25 open TCP sessions with the same IP address on the web service. Consider this restriction when designing a client server application.
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
15
Figure 6: Overview of IGWS 2
IClient Application I
I








SubrrltForwardMess.ages() Subni!MessagesResult
E-----------------------------------�
Ge!ForwardSta!uses(FW HWM1) GetFor.varc!StatusesResult, FW HWM2
E------------------------------------
GetRetumMessages(RE HWM1) GetRe1UrrtMessagesResult, RE HWM2
E-----------------------------------�
Subn-itForwardMessages() Subni!MessagesResult
E------------------------------------
GetForwardStaruoos(FW HWM2) GetFor.vardStatusesflesult, FW HWM3
E-------------------------------------
GetRetumMessages(RE HWM2) GetRaturnMessagesRr.sull, RE HWM3
E------------------------------------�
~
I I
The RESTful web service interface can be used in the same way, but with different web service URLs (Section 8).
Note: The IGWS 2 is periodically updated to improve functionality. Such updates could potentially include the addition of new fields to existing classes and/or new web service methods, however existing fields or methods remain functional. Client applications accessing the IGWS 2 web service must be capable of handling such updates.
Note: Atest system is provided with the updated web service interface at least 30 days before release of the update. Customers are encouraged to test their applications in advance of the upgrade using this test system. Refer to APPENDIX Cfor details.

3.1 Submit Messages
The client application prepares a message to be submitted to a terminal and uses one of the Submit web service operations (Section 4.3). If the IGWS 2 accepts the message, the client application receives a Gateway generated message ID of the submitted message; otherwise the client receives an error code.
To submit messages, the client application must provide its access ID/password pair with each web service call. In the event invalid credentials are submitted, the web service returns an error.
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
16
To map the client application's message IDs to the Gateway generated message IDs, client applications can optionally submit a UserMessagelD with the message. The UserMessagelD is returned as a response (Figure 7) together with a ForwardMessagelD generated by the Gateway.
3.1.1 Submit Messages to Terminals in Low Power Mode
Messages submitted to terminals that are in the low power mode are not transmitted to the terminal immediately. These messages are scheduled to be transmitted during the terminal's next wake-up period.

3.1.2 Message Timeout
If a terminal is blocked and a to-mobile message cannot be delivered, the Gateway closes the message. The following table shows how long, after the message has been transmitted, it takes the Gateway to close the message if it cannot be delivered.
Terminal mode  Terminal fully blocked  Terminal intermittently blocked
Regular  Up to 10 minutes  Up to 120 minutes
Low power  Up to 10 minutes from the scheduled send time  Up to 120 minutes from the scheduled send time

Refer to Table 2 for more information on message states.
Figure 7: Submit Messages
Client applicatio[J IGateway web service I
I
I
Suhmi\ForrvardMessllge(accesslO, password, message, UserMess~ID)
RirwardMessc1gel D, UserMessagelD
+--------------------------------�
~ Check for errors
I I I

3.2 Get From-Mobile Messages
~ Checks credentials ~ Checks the message destination ~ Verifies the message oontent Sends the message out
To start polling the Gateway, a client application typically uses the Gateway's current time as a first high watermark. The subsequent high-watermarks are returned with each successful GetReturnMessages call. GetReturnMessages calls that are not successful (responses ErrorCode > 0) or calls that do not return messages do not contain a valid next high watermark in the response.
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
V n
You specify a high watermark as part of a message filter (ReturnMessageFilter object -section 6.1 ) for the SOAP web service interface, or as a parameter for REST web service interfaces.
Client applications should always store the last valid high watermark and use it in subsequent calls.
When the GetReturnMessages call returns, it provides new high watermark information that the client application needs to use for the next call. A single response returns a maximum of 500 messages.
Figure 8 shows a client application polling the web service for response messages. The client application needs to pass account credentials and message filter information. The high watermark is part of the message filter. With every call to the Gateway's GetReturnMessages, the client application needs to provide at least the high watermark information.
Figure 8: Getting Messages
Client appljcation IGateway web service I
GetReturnMesseges(a,cc.esslD, ~ssword, {,igh watermarll)
Messages. error ID. BXt high watermark . . E-----------------------------------�:=:> Che~k for errors :=:=:, Store messages GetRelurnMessages(accesslD, �.assword, nigh w,itermarll /
Messages, error It(n1;~I tilgh wa,,.rrnark ) ~-------------------------------�:=:> Check for errors :=:> Sfore messages GetRetumMessages(acaisslD, i:,.assword, 0iqli w;11ermdt~)
Message<S. error ID. next high watermark ... ~--------------------------------~

:=:>
C-hecks credentials
:=:> Retlieve messages
I I
3.2.1 IGWS 2 Client Application Guidelines
Client applications should:
�
Provide a valid high watermark (a nonempty NextStartUTC property from a previous response) with each GetReturnMessages call. Failure to do so results in the IGWS 2 unnecessarily returning the same set of messages with each call.

�
Store the most recently received high watermark to a persistent store so that it can be used with the next call, or when the application needs to restart. A valid next high watermark is returned as part of a






, JI:.\
N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
V ,a
GetReturnMessages call response that has returned at least one message. GetReturnMessages calls that return no messages do not contain a valid next high watermark.
�
Set an HTTP request timeout to at least 60 seconds to allow enough time for a response to arrive. Explicitly set the value because default values vary between different development environments.

�
Query for new messages with a reasonable frequency. By default, IGWS 2 accounts can issue a maximum of 10 GET requests (includes information requests and requests to get to-mobile message statuses) every minute. This does not mean that a client application should call the IGWS 2 often. If your terminals produce less than 300 messages per minute, your client application should not query the IGWS 2 more frequently than once per minute. If you have higher traffic rates, you can request a query frequency limit increase (the current default limit allows retrieval of about 5,000 messages per minute).

�
Wait for a response from each GetReturnMessages call before issuing a new one. Failure to do so could result in several GetReturnMessages requests being processed in parallel. The IGWS 2 rejects GetReturnMessages requests if it detects that it is already processing three old requests from the same IGWS 2 account. If that happens, it returns an error code (21821-ERR_ TOO_MANY_SIMULTANEOUS_GET_REQUESTS).


During regular message polling, client applications should not:
�
Repeat the same high watermark. This behavior causes the application to always get the same duplicate set of old messages. Because lsatData Pro allows the retrieval of from-mobile messages for up to five days, this mistake can prevent retrieval of older messages.

�
Use a high watermark from a set number of hours/days in the past. This allows you to query mostly old messages. Each GetReturnMessages call returns mostly duplicate messages and occasionally several newer ones .

�
Call the IGWS 2 too frequently about terminal traffic. In this case most GetReturnMessages calls return empty results and can quickly exhaust the GET frequency limit -especially in cases where you query the IGWS 2 from more than one client application.

�
If your client application performs GetReturnMessages calls from a periodic timer, the application must ensure that the previous call to GetReturnMessages has finished before it issues a new one. Not addressing this issue can result in multiple calls being made using the same high watermark running in parallel.



3.3 Message Retention and Limitations
lsatData Pro allows the retrieval of from-mobile messages for up to five days. Any customer application requiring access to messages older than five days must retrieve the messages when available and store them locally for later retrieval.
3.3.1 Firewall Limits
The ORBCOMM firewall allows up to 10 simultaneous connections to the Web Service originating from the same IP address.

3.3.2 Call Frequency Limits
Each IGWS 2 account is assigned a GET and SEND frequency limit of 10 by default. A limit of 10 means that each IGWS 2 account can perform at most 10 GET and 10 SEND web service operations within a 1-minute interval. If web service calls are performed more frequently, an error code (16 -ERR_CUSTOMER_DELAYED) is returned . If that happens, the client application must wait for a short while and then repeat the same request until it no longer receives the error. The error code can occur frequently if you use more than one client application to access the IGWS 2 using the same account.
You can request a limit increase if you have higher traffic rates.
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
19
The current limit of 10 allows you to query up to 5,000 from-mobile messages and to-mobile statuses per minute.
GetReturnMessages calls executed in parallel also have a limit. If you have more than three GetReturnMessages calls running in parallel, subsequent calls fail until some of the running calls complete.
The following web service operations are included in the GET limit
�
GetReturnMessages

�
GetSubaccountsReturnMessages

�
GetForwardStatuses

�
GetForwardMessages

�
GetTerminalslnfo

�
GetBroadcastlnfos

�
GetSubaccountlnfos


The following web service operations are included in the SEND limit
�
SubmitForwardMessages

�
SubmitForwardMessageToMultipleDestinations

�
SubmitMessageCancelations



3.3.3 Message Submission and Retrieval Count Limits
The following limits apply to listed web service operations:
�
GetReturnMessages -Returns up to 500 messages .

�
GetSubaccountsReturnMessages -Returns up to 500 messages per subaccount.

�
GetForwardStatuses -Returns up to 500 statuses if a time stamp is used as a high watermark, or 100 statuses if message IDs (up to 100) are specified in its request filter.

�
GetForwardMessages -Returns up to 100 messages and accepts up to 100 message IDs in its request filter .

�
GetTerminalslnfo -Returns up to 'page size' terminals and accepts 1000 as a maximum value for the page size .

�
SubmitForwardMessages -Sends up to 100 to-mobile messages in one web service call.

�
SubmitForwardMessageToMultipleDestinations -Sends a message to a maximum of 100 different terminals .

�
SubmitMessageCancelations -Allows cancellation of up to 100 to-mobile messages.



3.3.4 Time Stamp Values
The IGWS 2 expects UTC based time in all web service calls containing time values and it returns UTC based time in all responses containing time values.
All time values are expected to be in the following format YYYY-MM-DD hh:mm:ss
where:
YYYY -year (for example, 2017)
MM -month (0 to 12)
DD -day (01 to 31)
hh -hour (0 to 23)
mm -minute (0 to 59)
ss -second (0 to 59)


3.4 Interface Changes
Minor web service interface changes include the following:
�
Addition of new web service operations

�
Addition of new fields to existing classes


Your client applications must be able to handle these kinds of changes without any impact to the client application code. You can test your application on a test system (APPENDIX C).
A new web service interface URL will be provided for major web service interface changes that require changes to the client application code. In this case, the previous web service interface URL is kept running to allow you enough time to move to the new one.
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020

4 WEB SERVICE APPLICATION PROGRAMMING INTERFACE
The following class diagrams represent classes that are defined within the web service's WSDL file. These classes are generated by development tools supporting SOAP based web services. Objects of the same classes are used by the REST web service interface.
Gatewaylnterface class is the main web service class containing all web service operations. An instance of this class needs to be created to invoke web service operations. There are three main categories of operations: get, information and submit. Figure 9 lists all operations of the IGWS 2 interface.
Figure 9: Gateway Interface
9 IM ess-a-g es
A
Gateway! nte rface
C t;,,; El M et hods
6"  GetBroadcastlnf os
IS;!  GetForwa,rdMessa-g es
6"  GetForw ardSt atuses
6"  GetRet urnMessa.ges
IS;!  Get Subaccountlnf os
6"  GetSubac�count sReturnMessages
IS;!  GetTerminalsln �o
6"  IGWSlnf ormat ion
G,  Submi 'ForwardMessages
IS;!  SubmitForwardMessa.geToMu lt ipleDestinations
G,  SubmitMessageCancela.tions

4.1 Get Operations
This section lists all the get operations provided by the IGWS 2. The class definitions associated with the get operations are described in section 6.1 .
The Gateway restricts the frequency that clients can call Get operations of the web service. A reasonable access rate for customers with many terminals would be 10 per minute. Accessing the web service more frequently may be rejected. If a web service user calls the web service too often, the web service immediately returns an error code (16:ERR_CUSTOMER_DELAYED). If you have a higher traffic rate or multiple back-office applications, you can request an increase to this limit.
Because a terminal can be provisioned with more than one ID (for example, MTSN and IMEI), all from-mobile messages will be returned with the terminal's prime ID.
4.1.1 GetBroadcastlnfos
Description This operation returns a list of broadcast ID information that was assigned to the account or subaccount (if subaccountlD is specified).
Syntax GetBroadc astinfosResult GetBroadc astinfos (String acc essID, String password, String subaccountID) ;
4.1.2 GetForwardMessages
Description  Retrieves to-mobile message records defined by an array of to-mobile message IDs (ForwardMessagelDs). If you specify the subaccountlD, the method returns to-mobile mbelonging to that subaccount. A to-mobile message belongs to an account if it was subthat account.  essages mitted by
Syntax  GetForwarc!MessagesResult GetForwarc!Messages(String accessID, password, int[] Forwarc!MessageIDs, String subaccountID;  String
Notes  The maximum number of to-mobile IDs is 100.


4.1.3 GetForwardStatuses
Description Retrieves to-mobile message statuses defined by the ForwardStatusFilter object. The filter object would preferably contain a time based high watermark. If a response object received by a successful call to this operation contains valid statuses, a new high watermark value will be returned as well (NextStartUTC). That new high watermark should be used in the subsequent call to this web service operation.
Syntax GetForwardStatusesResult GetForwardStatuses(String accessID, String password, ForwardStatusFilter filter);
Notes The maximum default number of returned statuses is 500 if you are querying by a time based high watermark, or 100 if you are querying by message IDs (refer to ForwardStatusFilter in section 6.3).

4.1.4 GetReturnMessages
Description Retrieves from-mobile messages defined by the ReturnMessageFilter filter. The filter object would preferably contain a time based high watermark. If a response object received by a successful call to this operation contains valid messages, a new high watermark value will be returned as well (NextStartUTC). That new high watermark should be used in the subsequent call to this web service operation.
Syntax GetReturnMessagesResult GetReturnMessages(String accessID, String password, ReturnMessageFilter filter);>
Notes GetReturnMessages returns a maximum of 500 messages. Refer to sections 3.2, 3.3, 6.1, and
APPENDIX D for more details and sample code snippets.
Invalid handling of high-watermarks is a common mistake; sample code snippets describe how to
manage message high-watermarks.

4.1.5 GetSubaccountsReturnMessages
Description Retrieves from-mobile messages from the customer account and all its subaccounts. It returns from-mobile messages received from the specified StartUTC high watermark up to 5 minutes. A new high watermark value (NextStartUTC) will always be returned within a response of each call. That new high watermark should be used in the subsequent call to this web service operation
If this Gateway account is not a super-account, this web service call will fail with the error 104 �ERR_UNAUTHORIZED_FOR__TH IS_OPERATION.
Syntax GetReturnMessagesResult GetSubaccountsReturnMessages (String accessID, String password, String startUTC, bool includeRawPayload, bool includeType);
Notes GetSubaccountsReturnMessages returns a maximum of 500 messages per account. Refer to Section 3.3 for message retention details. Refer to sections 3.2, 6.1, and APPENDIX D for more details and sample code snippets.
Invalid handling of high-watermarks is a common mistake; sample code snippets describe how to manage message high-watermarks.
There is one important difference between this web service operation and the
GetReturnMessages. This web service operation will only query messages from the time interval
starLutc up to starLutc+5 minutes. This limitation is necessary due to a potentially large number
of messages that can be returned by the query. Because of that, the NextStartUTC field of the
response will be valid even if no return messages were retrieved

4.1.6 GetSubaccountlnfos
Description Returns an array of all subaccount information associated to the client account.
Syntax GetSubaccountinfosResult GetSubaccountinfos(String >accessID, String password);

4.1.7 GetTerminalslnfo
Description This operation returns a list of information about the terminals that were assigned to the account or subaccount (if subaccountlD is specified).
Syntax GetTerrninalsinfoResult GetTerrninalsinfo (String accessID, String password, String subaccountID, String sinceID, int pageSize);
Notes GetTerminalslnfo returns a maximum of pageSize Terminallnfo records.
Range of the pageSize's parameter is 1 to 1000.
Result records are sorted by terminal's prime ID.
First call to the GetTerminalslnfo would set sincelD parameter to an empty string, and all subsequent calls to the prime ID of the terminal from the end of the previous call's result.


4.2 Information Operations
This section provides the information operations available on the Gateway interface.
4.2.1 IGWSlnformation
Description IGWSlnformation returns the following lsatData Pro gateway information:
�
Current lsatData Pro gateway time

�
Array of errors information defined by the lsatData Pro gateway (if requested)

�
lsatData Pro gateway version number


This web service operation can be called by a back-office server application during its
initialization sequence to create a dictionary of all available Gateway error codes. This dictionary
allows your back-office application to get both the name and the description of an error returned
by the Gateway. Refer to section 6.2 for more information about the Errorlnfo structure. Refer to
section 7.2 for sample code showing the use of this operation.
APPENDIX B lists common Gateway error codes.
Syntax IGWSinforrnationResponseErrorinfo[] IGWSinforrnationinfoErrorinfos (String accessID, String password, bool getErrorCodes);
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 24

4.3 Submit Operations
The default maximum submission rate per account is 10 submissions within a 1-minute period. If any Submit operation is called more frequently, the request is rejected. The account restriction applies when multiple client applications are accessing the same account.
The lsatData Pro gateway limits the number of outstanding to-mobile messages for each terminal. If there are more than 10 outstanding to-mobile messages of a certain size class (small, regular, or large) for a single terminal, the Gateway rejects them and reports an error message.
A small sized message has a payload of up to 399 bytes, a regular sized message has a payload between 400 and 1,999 bytes, and a larger message has a payload of 2,000 bytes or up to 10,000 bytes.
Outstanding messages are messages that have not yet been acknowledged by a terminal.
When a message is submitted it is in the open state and remains in this state until either a response is received, or an error condition causes the message to change to the closed state. Figure 10 shows submit message states for a to�mobile message.
Because a terminal can be provisioned with more than one ID (MTSN and IMEI for example), any of these IDs can be used when submitting a to-mobile message. For over-the air traffic, the lsatData Pro gateway chooses the correct one depending on the transport available or requested to send the message.
Figure 1 0: Message States

Message Open Message Closed A message has one of the following states:
Table 2: Message States
State  Description
0 -SUBMITTED  Gateway has accepted and queued the message.
1 -RECEIVED  The Gateway received an acknowledgment that the terminal received the message.
2-ERROR  The message closed due to an error. An error code specifies the reason.
3 -DELIVERY FAILED  Gateway failed to deliver the message to a terminal. An error code specifies the reason.
4-TIMED OUT  Message failed to be delivered within 120 minutes. A normal state when the message cannot be delivered is DELIVERY FAILED. TIMED OUT. This state is required in case the message is still not delivered 120 minutes after it was sent from the Gateway. Delayed send messages (WAITING state) will time out based on their expiry time.
5 -CANCELLED  Message was successfully canceled by the client application.
6-WAITING  The message has been sent with a delayed option and it will be queued for sending when conditions are met.
7 -NA  Not applicable. If the web service returns an error code for a message you inquired about, the state property for that message will be set to 7 and should not be used.
8 -TRANSMITTED  A broadcast message has been transmitted.

� Use GetForwardStatuses web service operation to query the message state.
This section provides a list of Gateway operations used to submit messages. Class information associated with the submit operations is given in section 6.3.
4.3.1 SubmitForwardMessages
Description Submits multiple to-mobile messages to the Gateway.
Syntax SubmitMessagesResult SubmitForward.Messages(String accessID, String password, Forward.Message[] messages ) ;
Notes A maximum of 100 SubmitForwardMessages messages can be submitted each call. The maximum size of each to-mobile message is 10,000 bytes for terminals not in low power mode and 5,000 bytes for terminals with low power mode enabled.

4.3.2 SubmitForwardMessageToMultipleDestinations
Description Submits a to-mobile message to the Gateway to be sent to multiple destinations.
Syntax SubmitMessagesResult SubmitForward.MessageToMultipleDestinations (String accessID, String password, Forward.Message message, String[] destinations ) ;
Notes A maximum of 100 destinations can be specified in each call.





, JI:.\
N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
26
4.3.3 SubmitMessageCancelations
Description Submits cancellation messages to selected to-mobile messages defined in the ForwardMessagelDs array.
Syntax SubmitMessageResultSubmitMessageCancelations (String accessID, string password, int[] ForwardMessageIDs);
Notes A cancellation message will not succeed if the to-mobile message was already sent to the terminal.
An immediate success response returned by this call does not mean that a to-mobile message
has successfully been canceled. It means that the Gateway has successfully accepted the
cancellation request. Success or failure of the cancellation request can be determined by its final
status (by calling GetForwardStatuses).
For example, a position request message is sent with a forward ID of 2057799. To cancel the
message, you need to call SubmitMessageCancelations and pass it an ID of 2057799 through its
ForwardMessagelD argument. In the immediate response from the Gateway, you receive a new
forward message ID = 2057812. The new ID, 2057812, refers to the cancellation request message.
If you periodically poll for message status changes by calling GetForwardStatuses, after a while,
you will receive a status for message 2057812. If the status is 'RECEIVED' and Errorld is 0 it
means that the cancellation request has succeeded, and that message 2057799 has been
canceled. In that case you would eventually receive the status of that message as 'CANCELED'.
However, if the ErrorId is not 0, but for example 17685, it indicates that your cancellation request
failed with error "17685 -Message cannot be canceled because it has already been sent to its
destination".

5 COMMON MESSAGE FORMAT
This section applies only to terminal users. All lsatoata Pro messages (both to-mobile and from-mobile) can be defined by a common message format.
Figure 11: Common Message Format
Message Ciaos  A f
El Properties
,. ,.  lsFoiward MIN
,. ,.  Name SIN


,. Fields
Fie ld  A  J, Elements 1---------~ Element  A
Ciaos  Ciaos
f  f
El Properties  /' Fields IE'---------1 El Properties
,.  Name  ,.  Index

,. Type ,. Valu e
Message  Instances of this class represent the message in both the to-mobile and from-mobile direction. Based on the message definitions, the Gateway encodes/decodes messages from/to this form.
ls Forward  This field is relevant only if the message is part of another field. In that case, the message is a to-mobile message if set to true. Otherwise it is a from-mobile message.
MIN  Message identification number for the given SIN .
Name  Message name
SIN  Service identification number
Fields  An array of Field (instances of the field class). Each Field could be made of either a name/value pair or contain another array of fields .

Field  A field is made of a name/value pair or an array of elements. If the client specifies both, the Gateway rejects the message.
Name  Field name
Type  Type of the field -refer to Table 3 for more details.
Value  Value of the field.
Message  A message embedded within a field.
Elements  Array of Element (instances of the element class).

Element  Element indexed structure containing one or more fields.
Index  Element's index
Fields  Element's fields

Below is a sample of a message payload in the XML form .
<Message SIN=" 2 " MIN=" 20 "> <Fields>
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 2s
<Field Narne="Forrn" Value="email" /> <Field Narne="ForrnFields "> <Elements> <Element Index="O">
<Fields> <Field Narne="Email" Value="me@me. com" /> <Field Narne="Subject" Value="subject" />
</Fields> </Element> </Elements> </Field > </Fields> </Message>
5.1 Common Message Fields
There are 10 types of common message fields. The attributes and elements used are determined by the field type, which is specified when the message is defined using Developer Studio.
Table 3: Common Message Fields
Developer Studio Field Type  Type Attribute (used by Dynamic or Property fields)  Value Attribute  Elements
Enum  enum  Enumeration value  None
Boolean  boolean  True or False  None
Unsigned Int  unsignedint  Decimal number  None
Signed Int  signedint  Decimal number  None
String  string  String (refer to Table 4 to conform to XML encoding rules)  None
Data  data  Base64 encoded data  None
Array  array  None  <Elements> <Element Index=> <Fields> </Fields> </Element> </Elements>
Message  message  None  <Message SIN= MIN= ls Forward=> <Fields> </Fields> </Message>
Dynamic  (one of above)  (depends on type)  (depends on type)
Property  (one of above)  (depends on type)  (depends on type)

, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 29
XML encoding rules have many special characters that require encoding. It is recommended that you use your programming language's XML libraries that conform to these rules. If unavailable, encode the characters in Table 4 in the order shown.
Table 4: Common Characters
Character  ASCII Code {Hex)  Name  XML-Encoded Value
&  38 (26)  Ampersand  &amp;
<  60 (3C)  Lower-Then Sign  &It
>  62 (3E)  Greater-Than Sign  &gt;
"  34 (22)  Quotation Mark (Double)  &quot
'  39 (27)  Apostrophe  &apos;

5.1.1 Common Message Example
Below is an example of a common message.
<Message SIN="128" MIN="l">
<Fields> <Field Narne="ExampleEnumField" Value="Blue" /> <Field Narne="ExampleBooleanField" Value="True" /> <Field Narne="ExampleUnsignedintField" Value="123" /> <Field Narne="ExampleSignedintField" Value="-123" /> <Field Narne="ExampleStringField" Value="Hello World" /> <Field Narne="ExampleDataField" Value="AQID" /> <Field Narne="ExampleArrayField">
<Elements> <Element Index="O" > <Fields> <Field Narne="ExampleBooleanField" Value="False" />
</Fields> </Element> <Element Index="l">
<Fields> <Field Narne="ExampleBooleanField" Value="True" /> </Fields> </Element>
</Elements> </Field> <Field Narne="ExampleMessageField">
<Message SIN="192" MIN="2" IsForward="True"> <Fields>
<Field Name="ExampleUnsignedintField" Value="123" /> <Field Name="ExampleSignedintField" Value="-123" /> </Fields>
</Message> </Field> <Field Name="ExampleDynamicField" Value="Hello" Type="string" /> <Field Name="ExamplePropertyField" Value="3" Type="unsignedint" />
</Fields> </Message>
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020



6 CLASSES
This section lists all the class definitions for the get, submit, and information operations.
6.1 Get Classes
The following class diagram presents all classes related to get operations for from-mobile messages. Figure 12: Get Classes
RetumMessagefilter  A
Ci>ll
1
El Fields
4iiili  lncludeRaw Payload
fiiiil'  lncludeType
tiiill  StartLJTC
lit  SubAccountlD
(3 Properties
~  lncludeTypeSpecified


RetumMessage A
Ct.u<
1
13 Fields
.. CustomerlD
.. ID
.. Mess.ageUTC
.. MobilelD
.. OTAMess.ageSize
.. Raw Payload
.. ReceivelJTC
.. RegionName
.. SIN
.. Transport.
S Properties
.,,
CustomerlDSpeclfied
,,
OTAMess.ageSizeSpecified
CommonMessage A
Clll<
1
Properties
.. Payload
.,,
Fields
-
.,,
ls.Forward .,, MIN
.,,
Name
.,, SIN

ReturnMessageFilter  The client needs to create an instance of this class when it calls the web service's GetReturnMessages operation.
lncludeRawPayload  By default, the Gateway returns already decoded messages. If it needs to get the message in a raw, binary form, the client needs to set this field to true, otherwise, only a decoded message is returned.
StartUTC  This field defines the start time stamp of messages the client wants to retrieve from the Gateway. If the field is not included, the operation is rejected. Refer to section 3.3 for message retention details.
SubAccountlD  If the client sets this field to the subaccount ID of one of its subaccounts, the Gateway returns only messages belonging to that subaccount. If this field is left empty, the client receives messages belonging to its account.
IncludeType  Set this field to true if you want the Payload to include field types as well. Because this is an optional Boolean field, if you want its value to be transferred to the Gateway, you also need to set the lncludeTypeSpecified field to true.
lncludeTypeSpecified  Set this field to true if you want the Include Type field to be sent to the Gateway.

GetReturnMessagesResult  A class holding a response from a GetReturnMessages call.
ErrorlD  Contains an error number if the web service operation encountered some problems or zero if it was successful.
NextStartUTC  Contains the value of the next StartUTC field that the client could provide with its GetMessageFilter to receive contiguous messages.
Messages  Array of ReturnMessage objects (that is, from-mobile messages).

ReturnMessage  Instance of this class contains a from-mobile message.
CustomerlD  ID of the customer account the message belongs to (used only when retrieving subaccounts' messages by calling GetSubaccountsReturnMessages()).
ID  ID of the from-mobile message. This ID is a unique number used by the Gateway to reference a message.
MessageUTC  The Gateway message time stamp. A time when the message becomes available to customers.
MobilelD  Identification number (Prime ID) of the terminal that sent the message.
RawPayload  This field contains the raw, binary payload of the message if the lncludeRawPayload flag in the ReturnMessageFilter is true.
ReceiveUTC  For a satellite traffic message -The time when the message was received by the earth station. For an MTWS and MTBP cellular traffic message -The Epoch or empty (that is, the value of the field is ignored).
Region Name  For satellite traffic message -the terminal's region name.
SIN  Message's service identification number. The SIN is also included in the payload.
Payload  The message payload. The payload includes the SIN and the MIN. The format of the payload is defined in section 5, Message class.
OTAMessageSize  Over-the-air message size in bytes.
Transport  Over-the-air transport used to deliver the message: 1 �Satellite 2-MTWS 3 �MTBP

6.2 Information Classes
Responses returned by the IGWSlnformation, GetTerminalslnfo, GetBroadcastlnfos, and GetSubaccountlnfos web service operation calls. It provides information related to the web service and a customer.
Figure 13: Information Classes
IG  SI nforu1ationRe:spoose  Err<>rlnfo
lli:;:;
CJ  CJ
El Field's  ErrorCodes  El Fi eld's
1-i--------.'3,l
�iii  ErrorlD  Ciiil  De~cript: ion
�iii  UTC  �iii  [IJ
rill  Ver:s:ion  rill  Nam e

, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 33

Tuminallnfo  A
Class -0  7
B Fields
Ciil  De;.c ription
Ciil  IM EI
Ciil  LastMTBPUTC
Ciil  La.stMTWSUTC
... ...  Las.t Reg is.t ra tion UTC MAC
Ciil  MEID
...  MTSN
Ciil  PairedTerminalPrirnelD
Ciil  PrimelD
Ciil  Region Name

Get:Subac~ountlnfoResult A
Cl=
5ubaccountlnfo A
.c, 7 11 Qil Subaccounts
~!
El Fields.
-/
-0 7 ... ErrorlD
El Fields ... Accountl D Ciil Name
j
IGWSlnformationResponse  Contains information about the IGWS 2.
ErrorlD  The number of the error or zero if the web service operation call succeeded.
UTC  Current time on the lsatData Pro gateway �current UTC time.
Version  lsatData Pro gateway version.
ErrorCodes  Array of Errorlnfo objects. Each Errorlnfo object describes one error code that the lsatData Pro gateway can return.

Errorlnfo  Contains information about a Gateway error.
Description  Description of the Gateway error
ID  Identification number of the Gateway error code
Name  Name of the Gateway error.

GetTerminalslnfoResult  An instance of that class is returned when the client calls the GetTerminallnfos web service operation.
Errorld  Contains an error number or zero if there were no errors.
Terminals  Array of terminal information -array of Terminallnfo objects.

, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 34
Terminallnfo  Terminal information class.
PrimelD  Primary terminal identifier. Terminals can have multiple identifiers; MTSN, IMEI, MEID or MAC address. During provisioning, one of these identifiers is marked as a primary ID. When set, the primary ID cannot be changed. All from-mobile messages will contain the prime ID only.
Description  Description of the terminal.
LastRegi strationUTC  UTC based time stamp of a last satellite terminal registration message. This field is valid only for satellite terminals.
Region Name  Name of the satellite geo beam from where the last satellite terminal registration message came from.
MTSN  The terminal serial number (used for satellite communication).
IMEI  The terminal's IMEI.
MEID  Terminal's MEID
MAC  Terminal's MAC address.
PairedTerminalPrimelD  Prime ID of the paired terminal when a satellite modem is paired to a cellular terminal.
LastMTBPUTC  UTC time of the most recent communication between the terminal and the lsatData Pro gateway over the cellular MTBP interface.
LastMTWSUTC  UTC time of the most recent communication between the terminal and the lsatData Pro gateway over the cellular MTWS interface.

GetSubaccountlnfosResult  An instance of that class is returned when the client calls the GetSubaccountlnfos web service operation.
ErrorlD  The number of the error or zero if the web service operation call succeeded.
Subaccounts  An array of Subaccountlnfo objects.

Subaccountlnfo  Each Subaccountlnfo object contains information about one of the client subaccounts.
AccountlD  This field contains the ID of the subaccount.
Name  Name of the subaccount.

GetBroadcastlnfoResult  An instance of that class is returned when the client calls the GetBroadcastlnfos web service operation.
Errorld  Contains an error number or zero if there were no errors.
Broadcastlnfos  NArray of broadcast information -array of Broadcastlnfo objects.

Broadcastlnfo  Broadcast information class.
ID  The broadcast ID.
Description  Description of the broadcast ID.



6.3 Submission Classes
Figure 14 shows a class returned by the Submit operation.
Figure 14: Message Submission Classes
.s  bm itMessagesResult  A
c:~
,CJ  "?
El Fi el ds
" ErrortD

-
Iii Su bmiss:1on s
I .....
,.,..
FmwardSubmission
C:l=,;.s
,CJ
"
"
"
"
"
El Fields De.s ina,tionlD Error\D fori1va,rdM essa g elD OTAM essageSize ScheduledSencfUTC
"
ermi na,IW.akeu pPeriod
"
UserM es sag et0
A
7
~� .1
When the client submits to-mobile messages to the Gateway, it is submitting instances of the Forward Message class. When the client queries content of the submitted messages, it gets instances of the ForwardMessageRecord class. When the client queries status of a to-mobile message, it gets instances of the ForwardStatus class.
SubmitMessagesResult  Returned after a call to a submit message web service operation.
ErrorlD  The error number of the error or zero if the web service operation call succeeded.
Submissions  An array of ForwardSubmission objects.

ForwardSubmission  Each ForwardSubmission object contains information about one submitted to-mobile message. In the event of an error (that is, ErrorlD ! = O), ForwardMessagelD and StateUTC are null (that is, not sent). However, DestinationlD and UserMessagelD, if set, are returned in the response.
DestinationlD  The mobile ID or the broadcast ID where the message is sent.
ErrorlD  Contains an error number or zero if the message was accepted by the Gateway.
FowardMessagelD  A unique ID of the to-mobile message generated by the Gateway. The client can use the ForwardMessagelD to query the status of the to-mobile message.
OTAMessageSize  Over-the-air message size in bytes.
UserMessagelD  This is an optional field. When it is submitted with the message, the Gateway returns this number to allow the client application to map its local message IDs (that is, UserMessagelD) to Gateway generated IDs (that is, ForwardMessagelD).
TerminalWakeupPeriod  The terminal's wake-up period in seconds if it is in low power mode, or zero (0) if it is not.
ScheduledSendUTC  If the terminal is in low power mode, this field contains the scheduled transmission time.

Figure 15: To-Mobile Message Related Classes
CommonMessage A
FWMessage A


DelayedSend A
Ci,<,
Cla�

=
-0 7
-0 7
-0 7
" SendOptions
,
,
Properties
Fi elds
, Fields. II
"
Payload
>
Fields
... DestinationlD
... M essage6:pirel.lTC
>
ls.Forward
... RawPayload
... SatelliteSendOnReceive
>
M IN
... TransportType
>
Name
...
UserMess.agelD
"
Payload
>
SIN




ForwardMessageReco..-d  A
Cw,
-0  7
,  Fields
...  CreatelJTC
...  DestinationlD
...  Error1D
...  ID
...  ls.Closed
...  RawPayload
...  Rei erenceNu mber
...  RegionName
...  ScheduledSendlJTC
...  State
...  StatuslJTC
...  Transport

GetForwardStatusesResuh A
Cw,
-0 7 , Fields ... ErrorlD
...
NextStartlfTC
ForwardStatusfilter Om ,0  A 7
,  Fields
...  ForwardMessagelDs
...  Startl/TC
...  Su baccountlD

... Statuses
~
ForwardStat  A
Cw,
,CJ  7
,  Fields
...  Errorl D
...  Forwa rdM essagelD
...  ls.Closed
...  ReferenceNu mber
...  RegionName
...  ScheduledSendlJTC
...  State
...  Stat e l/TC
...  Transport

ForwardMessage  A class that represents a to-mobile message.
DestinationlD  Destination of the client message. This is either a terminal or a broadcast ID.
RawPayload  Contains a byte array of raw payload that is submitted to its destination unchanged. This payload must follow the format of terminal messages. The format of terminal messages is described in [N200].
UserMessagelD  The UserMessagelD is the client's message identification number. The client must provide a user message ID if they want to map it to the Gateway's number -the ForwardMessagelD in the FowardSubmission class. The Gateway does not store the UserMessagelD anywhere. This field is irrelevant if the SubmitForwardMessageToMultipleDestinations web service operation is called.
Payload  An instance of the message class. Based on the client message definitions, Gateway encodes this payload to a binary array (raw payload) and sends it to its destination. The payload format is defined in section 5 under Message class. Payload does not apply to modem users, use RawPayload instead.
SendOptions  If set, SendOptions properties control how the to-mobile message is sent. If SendOptions is not set (set to null), the message will be sent as soon as possible. This option applies only to messages sent over the satellite network. If TransportType is set to "CELL", this option is ignored. By default, an account is not permitted to set this send option. Contact Customer Support for this permission.
TransportType  Specifies a transport for sending of the to-mobile message. It is an optional property and it should remain unspecified unless you want to limit your delivery options to a specific transport. Possible options include: "ANY" �any transport (satellite or cellular). "SAT' �satellite transport only. If this option is set, the message will never be sent over the cellular network. "CELL" -cellular transport only.




, JI:.\
N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
37
DelayedSend  This class controls delayed sending of to-mobile messages. This only applies to messages sent over the satellite network. This option is ignored if the cellular network is used. Delayed sending is typically used for sending to-mobile messages to the type of terminals that are powered down most of the time but will send from-mobile message(s) when it powers on.
SatelliteSendOnReceive  If set to true, to-mobile message will be queued for sending only when the Gateway receives a from-mobile message from the destination terminal.
MessageExpireUTC  If no from-mobile message arrives before the MessageExpireUTC, the message will be closed with a TIMED OUT state. If MessageExpireUTC is not set, the Gateway will set it to 5 days from the time the message was submitted.

ForwardStatusFilter  This filter defines what statuses are returned by the GetForwardStatuses web service operation.
ForwardMessagelDs  Array of message IDs (up to 100) whose statuses are returned by the GetForwardStatuses.
StartUTC  If ForwardMessagelDs is null or empty, StartUTC needs to be set. This field defines the start time stamp of to-mobile message statuses the client wants to retrieve from the Gateway.
SubaccountlD  If the client sets this field to the subaccount ID of one of its subaccounts, the Gateway returns only messages belonging to terminals associated to that subaccount. If this field is left empty, the client receives messages from terminals associated with its account.

ForwardStatus  Instance of this class provides information about the status of the client to-mobile message.
ErrorlD  Contains an error number if the message failed to be delivered (related to the value of the State property. For a list of states setting this property refer to Table 2) ..
FowardMessagelD  This is the to-mobile message ID. The FowardMessagelD is generated by the Gateway when the to-mobile message was first submitted.
lsClosed  A Boolean value that is true if the message has been closed or false if the Gateway is still expecting acknowledgment on this message.
ReferenceNumber  Message reference number. Some from-mobile messages can contain this number. It can be used to link to-and from-mobile messages.
StateUTC  A UTC time stamp of the state field defined in this class. The state is the latest state of the to-mobile message.
State  The latest state of the to-mobile message. For a list of states refer to Table 2.
ScheduledSendUTC  If the terminal is in low power mode, this field contains the scheduled transmission time. This field will contain a value only for low power mode terminal messages that have not yet been closed.
Region Name  Name of the satellite geo beam from where the last satellite terminal registration message came from.
Transport  Transport over which the message was sent. Possible options include: "SAT" -message was sent over the satellite network "CELLMTWS" -message was sent over the cellular network using MTWS interface "CELLMTBP" �message was sent over the cellular network using MTBP interface

GetForwardMessagesResult
Instance of this class is returned when a client calls the GetForwardMessages web service
operation.
ErrorlD  An error number if there was an error getting the requested messages; otherwise it is zero.
Messages  Array of ForwardMessageRecord.
ForwardMessageRecord  Objects of this class contain to-mobile message information.
CreateUTC  Time the message was created on the Gateway.
DestinationlD  The mobile ID or broadcast ID of the message.
ErrorlD  An error number if the Gateway was not able to get the to-mobile message or zero if a message was successfully retrieved.
ID  ID of the message. This is the message ID assigned by the Gateway when the message was first submitted.
lsClosed  True if the message has been closed, or false if it is still open.
RawPayload  Raw message payload
Payload  An instance of the Message class. (Payload does not apply to modem users, use RawPayload instead).
ReferenceNumber  Message reference number. Some from-mobile messages can contain this number. It can be used to link to-and from-mobile messages.
StatusUTC  UTC based time stamp of the most recent message status update.
State  The latest state of the message.
Region Name  Name of the satellite geo beam from where the last satellite terminal registration message came from.
ScheduledSendUTC  If the terminal is in low power mode, this field contains the scheduled transmission time. This field will contain a value only for low power mode terminal messages that have not yet been closed.
Transport  Transport over which the message was sent. Possible options include:
"SAT" �message was sent over the satellite network. "CELLMTWS" -message was sent over the cellular network using MTWS interface . "CELLMTBP" -message was sent over the cellular network using MTBP interface.
GetForwardStatusesResult  A class holding a response from a GetForwardStatuses call.
ErrorlD  Contains an error number if the web service operation encountered some problems or zero if it was successful.
NextStartUTC  Contains the value of the next StartUTC field that the client needs to provide with its ForwardStatusFilter to receive contiguous messages.
Statuses  Array of ForwardStatus objects.

7 REST WEB SERVICE INTERFACE
Rest samples can be found in the ORBCOMM Developer Toolkit. The examples in this section apply to both terminal and modem users unless noted otherwise. The REST web service interface supports both the XML and the JSON format. Base URL of the XML-base REST interface:
https:/ /isatd atapro.orbcom m.com/GLGW/2/RestMessages.svc/XML/
Base URL of the JSON-base REST interface:
https:/ /isatdatapro.orbcomm .com/GLGW/2/RestMessages.svc/JSON/
REST web service interface's API reference with Java and C# data classes and code snippets: https://isatdatapro.orbcomm .com/GLGW /2/restapiref REST web service interfaces' help pages showing request and response examples and data schema: https:/ / i satd at a pro. orbcom m. com/GLGW/2/R estMessag es.svc/XML/h elp Base URL of the JSON-base REST interface: https://isatdatapro.orbcomm .com/GLGW /2/RestMessages.svc/J SON/help
Note: Response samples that follow may not show all possible response properties. Some optional properties are not sent back to the caller if the property value is empty. For a full list of possible properties returned by REST web service calls, check the web service help pages mentioned earlier.

7.1 igws_information
Returns the current Gateway information. Equivalent to the SOAP web service operation IGWSlnformation(). Rate limited: Yes Requires authentication: Yes Response formats: JSON, XML HTTP methods: GET
Resource URL
https:/ /isatdata pro.orbcom m .com/GLGW /2/RestMessages.svc/JSON/igwsJnform ation/ https:/ /isatdata pro.orbcom m .com/GLGW /2/RestMessages.svc/X ML/i gws information/
Parameters
access..id  (required) Customers' lsatData Pro gateway access ID
Example Values: 70000010
password  (required) Customers' lsatData Pro gateway password
Example Values: XHTYFGVT
get_error_  (optional) When set to true, the response includes all Gateway error codes. Omit this parameter
codes  to receive the response without a list of all Gateway errors.
Example Values: true

, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 41
Example Requests -JSON
https:/ /isatdatapro.orbcomm .com/GLGW /2/RestMessages.svc/ JSON/igws Inform ation/?access id=7000001 0&password= XHTYFGVT&get_error_codes=true
Example Response -JSON
"ErrorID":0, "UTC":"2016-10-17 10:27:14", "Version":"4.6.0.10", "ErrorCodes": [
"ID":0,
"Name" : "NO_ERRORS", ''Description'':''''
},
"ID":2,
"Name":"ERR_INVALID_MESSAGE", "You have tried to send a restricted message."
},
Example Requests -XML
https:/ /isatd ata pro.orbcom m .com/GLGW/2/RestMessages.svc/XML/igws_lnform ation/?access_ id=7000001 0&password= XHTYFGVT&get_error_codes=true
Example Response -XML
<IGWSinformationResponse xm1ns:xsd="http://www.w3.org/200l/XMLSchema"
xm1ns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <ErrorID>0</ErrorID> <UTC>2016-10-17 10:44:27</UTC> <Version>4.6.0.10</Version> <ErrorCodes>
<Errorinfo> <ID>0</ID> <Name>NO_ERRORS</Name> <Description/>
</Errorinfo>
<ErrorInfo> <ID>l</ID> <Name>ERR_INVALID_MESSAGE</Name>



, JI:.\
N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
42
<Description>You have tried to send a restricted message . </Description> </Errorlnfo>
7.2 geLsubaccountJnfo
Returns a list of subaccounts associated with the customer account. Equivalent to SOAP web service operation GetSubaccountlnfos(). Rate limited: Yes Requires authentication: Yes Response formats: JSON, XML HTTP methods: GET
Resource URL
https://isatdata pro.orbcomm .com/GLGW /2/RestMessages.svc/ JSON/geLsu baccou nUnfo/ https://isatdatapro.orbcomm .com/GLGW /2/RestMessages.svc/XMUgeLsubaccounUnfo/
Parameters
access_id  (required) Customers' lsatData Pro gateway access ID
Example Values: 70000010
password  (required) Customers' lsatData Pro gateway password
Example Values: XHTYFGVT

Example Requests -JSON
https://isatdata pro.orbcom m .com/GLGW /2/RestMessages.svc/ J SON/ g eLsu ba ccou nUnfo/?a ccess id=7000001 0&password= XHTYFGVT
Example Response -JSON
"ErrorID" :0,
"Subaccounts": [
"AccountID" : "60001035",
"Name": " PVAUTODB 1 1 "
},
"AccountID" : "60001036",
"Name": " PVAUTODB 1 2 "
},
l l
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 43
Example Requests -XML
https:/ /isatd ata pro.orbcom m .com/GLGW/2/RestMessages.svc/XML/ g eLsubaccou ntJnfo/?access id=7000001 0&password= XHTYFGVT
Example Response -XML
<GetSubaccountlnfoResult xmlns:xsd="http://www.w3.org/200l/XMLSchema"
xmlns:xsi="http: //www.w3 .org/2001/ XMLSchema-instance"> <ErrorID>0</ErrorID> <Subaccounts>
<Subaccountlnfo> <AccountID>60001035</AccountID> <Name>PVAUTODB_l_l</Name>
</Subaccountlnfo>
<Subaccountlnfo> <AccountID>60001036</AccountID> <Name>PVAUTODB_1_2</Name>
</Subaccountlnfo> </Subaccounts> </GetSubaccountinfoResult>
7 .3 geLbroadcasLinfo
Returns a list of broadcast ID information associated with the customer account or its subaccount. Equivalent to SOAP web service operation GetBroadcastlnfos().
Rate limited: Yes
Requires authentication: Yes
Response formats: JSON, XML
HTTP methods: GET
Resource URL
https:/ /isatdata pro.orbcom m .com/GLGW /2/RestMessages.svc/ J SON/ g eLbroadca stJnfo/
https:/ /isatdata pro.orbcom m .com/GLGW /2/RestMessages.svc/X ML/ g eLbroa dca stJnfo/
Parameters
access_id  (required) Customers' lsatData Pro gateway access ID
Example Values: 70000010
password  (required) Customers' lsatData Pro gateway password
Example Values: XHTYFGVT

, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
44
subaccounUd (optional) Specify subaccount ID if you want to retrieve broadcast ID information associated to that subaccount. Omit this parameter to receive broadcast IDs associated only to the caller's account.
Example Values: 60001035
Example Requests -JSON
https:/ /isatd ata pro.orbcomm.com/GLGW/2/RestMessages.svc/ J SON/ g eLbroadca stJ nfo/?a ccess_ id=7000001 0&password= XHTYFGVT
Example Response -JSON
"ErrorID":0, "Broadcastinfos" : [
"ID": "16776890GRPCFDF", "Description":"bcast_16776890GRP5BEE"
},
"ID" : "16776891GRPD7E9", "Description":"bcast_16776891GRPD7E9"
l l
Example Requests -XML
https://isatdatapro.orbcomm.com/GLGW/2/RestMessages.svc/XMUgeLbroadcastJnfo/?access id=7000001 0&password= XHTYFGVT&subaccountJd=60001035
Example Response -XML
<GetBroadcastinfoResult xmlns:xsd="http://www.w3.org/2001/ XMLSchema"
xmlns:xsi="http: //www.w3.org/2001/XMLSchema-instance"> <ErrorID>O</ErrorID> <Broadcastinfos>
<Broadcastinfo> <ID>16776893GRP5BEE</ID> <Description>bcast_16776893GRP5BEE</Description>
</Broadcastinfo>
<Broadcastinfo> <ID>16776892GRPD7E9</ID> <Description>bcast_16776892GRPD7E9</Description>
</Broadcastinfo> </Broadcastinfos> </GetBroadcastinfoResult>

7.4 geLterminals_info
Returns terminal information associated with the customer account or its sub-account. Equivalent to SOAP web service operation GetTerminalslnfo(). Rate limited: Yes Requires authentication: Yes Response formats: JSON, XML HTTP methods: GET
Resource URL
https:/ /isatdatapro.orbcomm .com/GLGW /2/RestMessages.svc/ JSON/geLterm in alsJnfo/ https:/ /isatdata pro.orbcom m .com/GLGW /2/RestMessages.svc/X ML/ g eLterm in a I s_info/
Parameters
access_id  (required) Customers' lsatData Pro gateway access ID
Example Values: 70000010
password  (required) Customers' lsatData Pro gateway password
Example Values: XHTYFGVT
subaccounUd  (optional) Specify subaccount ID if you want to retrieve terminal information associated to that
subaccount.
Example Values: 60001035
since_id  (optional) Starting terminal prime ID
Example Values: 09000782TST0002
page_size  (optional) Page size -[1 ...1000). Omit this parameter to use a default page size value of 1000.
Example Values:100

Example Requests -JSON
https:/ /isatdata pro.orbcom m .com/GLGW /2/RestMessages.svc/ J SON/ g eLterm in a I sJnfo/?access id=7000001 0&password= XHTYFGVT
Example Response -JSON
"ErrorID":0,
"Terminals" : [
"PrimeID":"09000680TST0006", "LastRegistrationUTC":"2016-10-17 13:26: 20", "RegionName":"AMERRB15","MTSN":"09000680TST0006"
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 46
Example Requests -XML
https:/ /isatdatapro.orbcomm .com/GLGW/2/RestMessages.svc/XML/geUerm in als info/?access id=70000010&password=XHTYFGVT&subaccounLid=60001035&since_id=09000782TST0002&page_size=10
Example Response -XML
<GetTenninalslnfoResult xmlns :xsd="http://www.w3.org/2001/XMLSchema"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <ErrorID>O</ErrorID> <Tenninals>
<Tenninallnfo> <PrimeID>09000782TST0003</PrimeID> <MTSN>09000782TST0003</MTSN> <IMEI>613836628800003</IMEI> <LastMTWSUTC>2016-10-17 13:26:20</LastMTWSUTC>
</Tenninallnfo>
<Tenninallnfo> <PrimeID>09000782TST0004</PrimeID> <LastRegistrationUTC>2016-10-17 13:26:20</LastRegistrationUTC> <RegionName>AMERRB15</RegionName> <MTSN>09000782TST0004</MTSN> <IMEI>613836628800004</IMEI> <LastMTBPUTC>2016-10-17 13:26:20</LastMTBPUTC>
</Tenninallnfo> </Tenninals> </GetTenninalsinfoResult>


7.5 geLreturn_messages
Returns array of from-mobile messages belonging to the customer account or one of its subaccounts. Equivalent to SOAP web service operation GetReturnMessages(). Rate limited: Yes Requires authentication: Yes Response formats: JSON, XML HTTP methods: GET
Resource URL https:/ /isatd ata pro.orbcom m .com/GLGW/2/RestMessages.svc/ J SON/ g evetu rn_messages/ https:/ /isatd ata pro.orbcom m .com/GLGW/2/RestMessages.svc/XML/ g etJetu rn_m essa g es/
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
47
Parameters
access_id (required) Customers' lsatData Pro gateway access ID
Example Values: 70000010 password (required) Customers' lsatData Pro gateway password
Example Values: XHTYFGVT
start.utc (required) Set the value of this parameter based on your previous response. The Gateway returns messages that have arrived after this time stamp.
inc/ude_raw_ (optional) If this parameter is specified and its value set to true, the Gateway always returns payload messages' raw payload. By default, this option is turned off, unless the Gateway fails to decode the message, in which case the raw payload is always returned.
subaccounUd (optional) Specify subaccount ID if you want to retrieve terminal information associated to that subaccount.
inc/ude_type (optional) Set this parameter to true if you want the payload to include the field types.
Example Requests -JSON
Return messages that have arrived after Oct 12, 2016 10:00:05 UTC:
https:/ /isatdata pro.orbcom m .com/GLGW /2/RestMessages.svc/ J SON/ g eveturn_messages/?access_ id=70000010&password=XHTYFGVT&start_utc=2016-10-12%2010:00:05
Example Response for Terminals-JSON
"ErrorID":0, "NextStartUTC": "2016-10-13 15:19:59", "Messages": [
"ID":120213064, "MessageUTC":"2016-10-12 12 : 42:01", "ReceiveUTC":"2016-10-12 12 : 42:01",
"SIN" :0,
"MobileID":"01173096SKY0E45", "Payload":{ "Name":"modemRegistration",
"SIN" : 0,
"MIN" : 0,
"Fields": [ {"Name" : "hardwareMajorVersion","Value":"4"}, {"Name" : "hardwareMinorVersion", "Value":"2"}, {"Name" : "softwareMajorVersion","Value":"13"}, {"Name" :"softwareMinorVersion", "Value":"1"},
{"Name" : "product", "Value": "4"},
{"Name" : "wakeupPeriod","Value":"None"}, {"Name" : "lastResetReason","Value":"Software"},
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 48
{"Name" : "virtualCarrier","Value" : "6"}, {"Name" : "beam", "Value": "l"}, {"Name" : "vain", "Value": "0"}, {"Name" : "reserved", "Value": "0"}, {"Name" : "operatorTxState","Value":"0"}, {"Name" : "userTxState", "Value": "0"}, {"Name":"broadcastIDCount","Value":"0"}
l,
"RegionName":"AMERRBll", "OTAMessageSize":15, "CustomerID":0
},
Example Requests -XML
Return messages that have arrived after Oct 12, 2016 10:00:05 UTC, include the raw payload even if message was decoded successfully:
https:/ /isatdatapro.orbcomm .com/GLGW /2/RestMessages.svc/XMUgetJeturn_messages/?access_ id=70000010&password=XHTYFGVT&start_utc=2016-10-12%2010:00:0S&includeJaw:eayload=true
Example Response for Terminals-XML
<GetReturnMessagesResult xmlns:xsd="http://www.w3 .org/200l/XMLSchema"
xmlns:xsi="http://www.w3.org/200l/XMLSchema-instance"> <ErrorID>0</ErrorID> <NextStartUTC>2016-10-13 15 :19:59</NextStartUTC> <Messages>
<ReturnMessage> <ID>l20213064</ID> <MessageUTC>2016-10-12 12:42:01</MessageUTC> <ReceiveUTC>2016-10-12 12:42:01</ReceiveUTC> <SIN>0</SIN> <MobileID>01173096SKY0E45</MobileID> <RawPayload>AAAEAg0BBAAHAGEAAAAA</RawPayload> <Payload Name="modemRegistration" SIN="0" MIN="0">
<Fields> <Field Name="hardwareMajorVersion" Value="4"/> <Field Name="hardwareMinorVersion" Value="2"/> <Field Name="softwareMajorVersion" Value="l3"/> <Field Name="softwareMinorVersion" Value="l"/> <Field Name="product" Value="4"/>



, JI:.\
N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
49
<Field Narne="wakeupPeriod" Value="None"/> <Field Narne="lastResetReason" Value="Software"/> <Field Narne="virtualCarrier" Value="6"/> <Field Narne="bearn" Value="l"/> <Field Narne="vain" Value="O"/> <Field Narne="reserved" Value="O"/> <Field Narne="operatorTxState" Value="O"/> <Field Narne="userTxState" Value="O"/> <Field Narne="broadcastIDCount" Value="O"/>
</Fields> </Payload> <RegionNarne>AMERRBll</RegionNarne> <OTAMessageSize>15</0TAMessageSize> <CustomerID>O</CustomerID>
</ReturnMessage>
Example Requests -XML
Return messages that have arrived after Oct 12, 2016 10:00:05 UTC, include the raw payload even if message was decoded successfully:
https:/ /isatd ata pro.orbcomm.com/GLGW/2/RestMessages.svc/XMU g eveturn_rn essa ges/?access_ id=70000025&password=XHTYFGVT&start_utc=2016-10-12%2010:00:0S&includeJaw:eayload=true
Example Response for Modems -XML
<GetReturnMessagesResult xmlns:xsd="http://www .w3 . org/200l/XMLSchema"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <ErrorID>O</ErrorID> <NextStartUTC>2016-10-13 15 :19:59</NextStartUTC> <Messages>
<ReturnMessage> <ID>120213064</ID> <MessageUTC>2016-10-12 12:42:01</MessageUTC> <ReceiveUTC>2016-10-12 12:42:01</ReceiveUTC> <SIN>O</SIN> <MobileID>01173096SKYOE45</MobileID> <RawPayload>AAAEAgOBBAAHAGEAAAAA</RawPayload> <RegionNarne>AMERRBll</RegionNarne> <OTAMessageSize>15</0TAMessageSize> <CustomerID>O</CustomerID>
</ReturnMessage> <ReturnMessage>

, JI:.\
N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
50
<ID>120213072</ID> <MessageUTC>2016-10-12 12:52:50</MessageUTC> <ReceiveUTC>2016-10-12 12:52:50</ReceiveUTC> <SIN>16</SIN> <MobileID>01028661SKYBD46</MobileID> <RawPayload>
EAgEAQYBBAEFOS4zLjEXDxAREhMUFRYXGBkaGx0gIQs1LjMuMC4xMzYyMg== </RawPayload> <RegionName>AMERRB12</RegionName> <OTAMessageSize>43</0TAMessageSize> <CustomerID>O</CustomerID>
</ReturnMessage>
7.6 geLsubaccounts_return_messages
Returns array of from-mobile messages belonging to the customer account and all its subaccounts. Equivalent to SOAP web service operation GetSubaccountsReturnMessages(). Rate limited: Yes Requires authentication: Yes Response formats: JSON, XML HTTP methods: GET
Resource URL
https:/ /isatdata pro.orbcom m .com/GLGW /2/RestMessages.svc/J SON/ g eLsu ba ccou ntsJeturn_m essa g es/ https:/ /isatdata pro.orbcom m .com/GLGW /2/RestMessages.svc/X ML/geLsuba ccou ntsJeturn_m essag es/
Parameters
access_id  (required) Customers' lsatData Pro gateway access ID
If this Gateway account is not a super-account, this web service call will fail with the error 104 -ERR_UNAUTHORIZED_FOR_THIS_OPERATION.
password  (required) Customers' lsatData Pro gateway password
start.utc  (required) Set the value of this parameter based on your previous response. The Gateway returns messages that have arrived after this time stamp.
There is one important difference between this web service operation and the get_return_ messages. This web service operation will only query messages that were received in the 5�minute time interval after the start...utc. This limitation is necessary due to a potentially large number of messages that could be returned by the query. Because of that, the NextStartUTC field of the response will be valid even if no return messages were retrieved.
include_raw_ payload  (optional) If this parameter is specified and its value set to true, the Gateway always returns messages' raw payload. By default, this option is turned off, unless the Gateway fails to decode the message, in which case the raw payload is always returned.
include_type  (optional) Set this parameter to true if you want the payload to include the field types.

, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
V s,
Example Requests -JSON Return messages that have arrived between (but not including) Oct 12, 2016 10:00:00 UTC and Oct 12, 2016
10:05:00 UTC:
https:/ /isatd ata pro.orbcom m .com/GLGW/2/RestMessages.svc/ J SON/ g eLsu baccou ntsJeturn_m essages/?access_ id=70000035&password=XHTYFGVT&start_utc=2016-10-12%2010:00:00
Example Response -JSON
"ErrorID" :0, "NextStartUTC":"2016-10-12 10:05 :00", "Messages": [
"ID" :120213064, "MessageUTC":"2016-10-12 10 : 02:01", "ReceiveUTC" : "2016-10-12 12 : 02:01", "SIN":0, "MobileID":"01173096SKY0E45", "Payload":{
"Name": "modernRegistration", "SIN" : 0,
"MIN" : 0,
"Fields": [ {"Name" : "hardwareMajorVersion","Value":"4"}, {"Name" : "hardwareMinorVersion","Value":"2"}, {"Name" : "softwareMajorVersion", "Value":"13"}, {"Name" : "softwareMinorVersion","Value":"1"}, {"Name" : "product", "Value" : "4 " }, {"Name" : "wakeupPeriod","Value":"None"}, {"Name" : "lastResetReason","Value":"Software"}, {"Name" : "virtualCarrier","Value" : "6"}, {"Name" : "beam", "Value": "l"}, {"Name" : "vain", "Value": "0"}, {"Name" : "reserved", "Value": "0"}, {"Name" : "operatorTxState","Value":"0"}, {"Name" : "userTxState", "Value" : "0"}, {"Name" : "broadcastIDCount","Value":"0"}
l,
"RegionName":"AMERRBll", "OTAMessageSize" :15, "CustomerID":60000034



, JI:.\
N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
52
},
Each message of the response will contain a CustomerlD field . That ID is the ID of a Gateway account that owns the message.
The next request should take the value of the NextStartUTC and use that value as a new start_utc parameter:
https:/ /isatd ata pro.orbcom m.com/GLGW/2/RestMessages.svc/ J SON/ g eLsu baccou ntsJeturn_m essages/?access id=70000035&password=XHTYFGVT&start_utc=2016-10-12%2010:05:00
Example of an Empty Response -JSON
"ErrorID" :0,
"NextStartUTC":"2016-10-12 10:10 :00" ,
"Messages":[]
Notice that, even though the response contains no messages, the NextStartUTC contains a valid value. Your next request needs to use that value for the next start_utc:
https://isatd ata pro.orbcomm .com/ GLGW/2/RestMessages.svc/ J SON/ g eLsu ba ccou ntsJeturn_m essa ges/?access id=70000035&password=XHTYFGVT&start_utc=2016-10-12%2010:10:00
7.7 geLforward_statuses
Returns statuses of sent to-mobile (forward) messages. Equivalent to SOAP web service operation GetForwardStatuses(). Rate limited: Yes Requires authentication: Yes Response formats: JSON, XML HTTP methods: GET
Resource URL
https:/ /isatdata pro.orbcom m .com/GLGW /2/RestMessages.svc/ J SON/ g eLforwa rd_statu ses/ https:/ /isatdatapro.orbcomm .com/GLGW /2RestMessages.svc/XMUgeLforward_statuses/
Parameters
access_id  (required) Customers' lsatData Pro gateway access ID
If this Gateway account is not a super-account, and the subaccounUd parameter was specified,
this web service call will fail with the error 104 -ERR_UNAUTHORIZED_FOR_THIS_OPERATION .
password  (required) Customers' lsatData Pro gateway password

, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 53
starLutc  (optional) If this field is specified, the Gateway returns messages that have changed after this time stamp. NOTE: Even though the starLutc and the fwlDs fields are optional, one of the two must be present.
fw/Ds  (optional) List of comma-separated to-mobile message IDs whose statuses should be returned. A maximum of 100 message IDs can be specified.
subaccounUd  (optional) If this field is specified, the Gateway returns statuses of messages only belonging to the subaccount.

Example Requests -JSON
Return statuses of the messages with following IDs: 1450235,1450236
https://isatdata pro.orbcom m .com/GLGW /2/RestMessages.svc/ J SON/ g eLforwa rd_statu ses/? access_ id=70000035&password=XHTYFGVT&fwIDs=1450235,1450236 Return statuses for all message changes that have happened after 3pm May 25, 2011: https:/ /isatdata pro.orbcom m .com/GLGW /2/RestMessages.svc/ J SON/ g eLforwa rd_statu ses/? access_
id=70000035&password=XHTYFGVT&start_utc=2017-05-25%2015:00:00

Example Response -JSON
"ErrorID": 0, "NextStartUTC": "2011-05-26 14:23:02", "Statuses":
"Forwarc!MessageID": 964363, "IsClosed": true, "State" : 3, "ErrorID" : 12309, "StateUTC": "2011-06-29 13:44:25", "ReferenceNurnber" : 1030 "Transport" : SAT
},
"Forwarc!MessageID": 964532, "IsClosed": true, "State" : 1, "StateUTC": "2011-06-29 14:15:50", "ReferenceNurnber" : 1350 "Transport" : CELLMTBP
Example Requests -XML
Return statuses for all message changes that have happened after 3pm May 25, 2011:
https:/ /isatdatapro.orbcomm .com/GLGW/2/RestMessages.svc/ JSON/get_forward statu ses/?access id=70000035&password=XHTYFGVT&start_utc=2011 -05-25%2015:00:00
Example Response -XML
<GetForwardStatusesResult xrnlns :xsi="http://www.w3.org/200l/XMLSchema-instance"
xrnlns:xsd="http: //www.w3.org/200l/XMLSchema"> <ErrorID>O</ErrorID> <NextStartUTC>2011-07-22 14 :23 :02</NextStartUTC> <Statuses>
<ForwardStatus> <Forwarc!MessageID>964363</Forwarc!MessageID> <IsClosed>true</IsClosed> <State>l </State> <StateUTC>2011-06-29 13: 44:25</StateUTC> <ReferenceNurnber>l030</ReferenceNurnber> <Transport>SAT</Transport>
</ForwardStatus>
<ForwardStatus> <Forwarc!MessageID>964960</Forwarc!MessageID> <IsClosed>true</IsClosed> <State>3</State> <ErrorID>l 2309</ErrorID> <StateUTC>2011-06-29 15: 38:35</StateUTC> <ReferenceNurnber>l35</ReferenceNurnber> <Transport>SAT</Transport>
</ForwardStatus>
7 .8 geLforward_messages
Returns contents of to-mobile (forward) messages. Equivalent to SOAP web service operation GetForwardMessages()
Rate limited: Yes
Requires authentication: Yes
Response formats: JSON, XML
HTTP methods: GET
Resource URL
https:/ /isatdata pro.orbcomm .com/GLGW /2/RestMessages.svc/ JSON/geLforward messages/
https:/ /isatd ata pro.orbcom m .com/GLGW /2/RestMessages.svc/XMUgeLforward_m essa ges/
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
55
Parameters
access_id (required) Customers' lsatData Pro gateway access ID password (required) Customers' lsatData Pro gateway password fw/Ds (required) List of comma-separated forward message IDs whose content is returned.
subaccounUd (optional) If this field is specified, the Gateway returns the contents of messages only belonging to the subaccount.
Example Requests -JSON
Return statuses of the messages with following IDs: 1450235,1450236
https:/ /isatd ata pro.orbcom m.com/GLGW/2/RestMessages.svc/ J SON/ g eUorwa rd_m essages/?access id=70000035&password=XHTYFGVT&fwIDs=1153034,1151791
Example Response for Terminals -JSON
"ErrorID": O, "Messages":
"ID": 1153034, "StatusUTC" : "2011-08-04 20 : 38:34", "CreateUTC" : "2011-08-04 20 : 38:26", "IsClosed": true, "State" : 1, "DestinationID": "01000056SKY1A95", "RawPayload": [23, 5, OJ, "Payload": {
"Name": "getDataLogEntries", "SIN" : 23,
"MIN" : 5,
"IsForward": "True" }, "ReferenceNumber": 729
},
"ID": 1151791, "StatusUTC" : "2011-08-04 16 : 02:35", "CreateUTC" : "2011-08-04 15 : 47:55", "IsClosed": true, "State" : 3, "DestinationID": "16777178GRP557F", "ErrorID": 1039, "RawPayload": [0, 98],
"Payload": { "Name" : "RequestLastRxMetrics",
"SIN": O, "MIN": 98, "IsForward": "True"
}, "ReferenceNumber": 67
Example Response for Modems -JSON
"ErrorID": O, "Messages":
"ID" : 1153034, "StatusUTC" : "2011-08-04 20 : 38:34", "CreateUTC" : "2011-08-04 20 : 38:26", "IsClosed": true, "State" : 1, "DestinationID": "01000056SKY1A95", "ErrorID": 0, "RawPayload" : [23,5,0], "ReferenceNumber" : 729
},
"ID" : 1151791, "StatusUTC" : "2011-08-04 16 : 02:35", "CreateUTC" : "2011-08-04 15 : 47:55", "IsClosed": true,
"State" : 3,
"DestinationID" : "16777178GRP557F", "ErrorID": 1309, "RawPayload": [128, 98], "ReferenceNumber": 67
Example Requests -XML
Return statuses of the messages with following IDs: 1450235,1450236
https:/ / isatdatapro.orbcom m .com/GLGW/2/RestMessages.svc/XML/ g eLforwa rd_m essages/?access id=70000035&password=XHTYFGVT&fwIDs=1153034,1151791
Example Response for Terminals -XML
<GetForwardMessagesResult xrnlns:xsi="http://www.w3.org/200l/XMLSchema-instance"
xrnlns:xsd="http://www.w3.org/200l/XMLSchema"> <ErrorID>O</ErrorID> <Messages>
<ForwardMessageRecord> <ID>ll53034</ID> <StatusUTC>2011-08-04 20:38:34</StatusUTC> <CreateUTC>2011-08-04 20:38:26</CreateUTC> <IsClosed>true</IsClosed> <State>l</State> <DestinationID>01000056SKYlA95</DestinationID> <RawPayload>FwUA</RawPayload> <Payload Name="getDataLogEntries" SIN="23" MIN="5" IsForward="True"/> <ReferenceNumber>729</ReferenceNumber>
</ForwardMessageRecord>
<ForwardMessageRecord> <ID>ll51791</ID> <StatusUTC>2011-08-04 16:02 : 35</StatusUTC> <CreateUTC>2011-08-04 15 :47 : 55</CreateUTC> <IsClosed>true</IsClosed> <State>3</State> <DestinationID>l6777178GRP557F</DestinationID> <ErrorID>l309</ErrorID> <RawPayload>AGI=</RawPayload> <Payload Name="RequestLastRxMetrics" SIN="O" MIN="98" IsForward="True"/> <ReferenceNumber>67</ReferenceNumber>
</ForwardMessageRecord> </Messages> </GetForwardMessagesResult>
Example Response for Modems-XML
<GetForwardMessagesResult xrnlns:xsi="http://www.w3.org/200l/XMLSchema-instance" xrnlns:xsd="http://www.w3.org/200l/XMLSchema"> <ErrorID>O</ErrorID>
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
58
<Messages>
<ForwardMessageRecord> <ID>ll53034</ID> <StatusUTC>2011-08-04 20:38:34</StatusUTC> <CreateUTC>2011-08-04 20:38:26</CreateUTC> <IsClosed>true</IsClosed> <State>l</State> <DestinationID>01000056SKYlA95</DestinationID> <ErrorID>O</ErrorID> <RawPayload>FwUA</RawPayload> <ReferenceNumber>729</ReferenceNumber>
</ForwardMessageRecord>
<ForwardMessageRecord> <10>1151791</ID> <StatusUTC>2011-08-04 16:02:35</StatusUTC> <CreateUTC>2011-08-04 15:47:55</CreateUTC> <IsClosed>true</IsClosed> <State>3</State> <DestinationID>l6777178GRP557F</DestinationID> <ErrorID>l309</ErrorID> <RawPayload>AGI=</RawPayload> <ReferenceNumber>67</ReferenceNumber>
</ForwardMessageRecord> </Messages> </GetForwardMessagesResult>
7. 9 submiLmessages
Submits multiple messages to their destinations. Equivalent to SOAP web service operation Sub m itF o rward Messages().
Rate limited: Yes
Requires authentication: Yes
Response formats: JSON, XML
HTTP methods: POST
Resource URL
https:/ /isatd ata pro.orbcom m.com/GLGW/2/RestMessages.svc/ J SON/ su bm it_messages/
https:/ /isatd ata pro.orbcom m.com/GLGW/2/RestMessages.svc/XML/su bm it_m essa g es/



, JI:.\
N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
sg
Data Object
access_id  (required) Customers' lsatData Pro gateway access ID
password  (required) Customers' lsatData Pro gateway password
messages  (required) Array of ForwardMessage objects

Example Requests -JSON POST https://isatdatapro.orbcomm.com/GLGW/2/RestMessages.svc/JSON/submit messages
POST https://isatdatapro.orbcomm.com/GLGW/2/ RestMessages.svc/JSON/subrnit_messages/ HTTP/1.1 Content-Type: application/ json; charset=utf-8 Host: 172. 20.101.174 Content-Length: 134 Expect : 100-continue Connection: Keep-Alive
"access_id" : "70000001", "password": "password", "messages" :
"DestinationID" : "01000056SKY1A95", "UserMessageID" : 101, "RawPayload": [16, 1)
Example Response -JSON
"ErrorID": 0, "Submissions":
"ForwardMessageID": 1209801, "DestinationID": "01000056SKY1A95", "ErrorID": 0, "UserMessageID": 101

Example Requests -XML
POST

https://isatdatapro.orbcomm.com/GLGW/2/RestMessages.svc/XMUsubmit_rnessages
POST https://isatdatapro.orbcomm.com/GLGW/2/RestMessages.svc/XML/submit_messages/ HTTP/1.1 Content-Type: application/xrnl; charset=utf-8 Host: 172.20.101.174 Content-Length: 450 Expect: 100-continue Connection: Keep-Alive
<?xrnl version="l.0" encoding="utf-8"?>
<SubmitForwardMessages xrnlns="IGWS" xrnlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xrnlns:xsd="http://www.w3.org/2001/XMLSchema"> <access_id>70000006</access_id> <password>password</password> <messages>
<ForwardMessage> <RawPayload>EAE=</RawPayload> <DestinationID>01000056SKY1A95</DestinationID> <UserMessageID>l0l</UserMessageID>
</ForwardMessage> </messages> </SubmitForwardMessages>

Example Response -XML
<?xrnl version="l.0" encoding="utf-8"?>
<SubmitForwardMessagesResponse xrnlns="IGWS" xrnlns:xsi="http://www.w3.org/200l/XMLSchema-instance"
xrnlns:xsd="http://www.w3.org/2001/XMLSchema"> <SubmitForwardMessagesResult> <ErrorID>0</ErrorID> <Submissions>
<ForwardSubmission> <ForwardMessageID>1209861</ForwardMessageID> <DestinationID>01000056SKY1A95</DestinationID> <ErrorID>0</ErrorID> <UserMessageID>l0l</UserMessageID>
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 61
</ForwardSubmission> </Submissions> </SubmitForwardMessagesResult> </SubmitForwardMessagesResponse>
7 .10 submit.message_to_destinations
Submits a message to multiple destinations. Equivalent to SOAP web service operation SubmitForwardMessageToMultipleDestinations().
Rate limited: Yes
Requires authentication: Yes
Response formats: json, xml
HTTP methods: POST
Resource URL
https:/ /isatdata pro.orbcomm .com/GLGW /2/RestMessages.svc/ JSON/subm iLmessage to destinations/ https://isatdatapro.orbcomm.com/GLGW/2/RestMessages.svc/XMUsubmiUnessage_to_destinations/
Parameters
access_id  (required) Customers' IDP Gateway access ID
password  (required) Customers' IDP Gateway password
destinations  (required) A list of coma-separated destinations where the message needs to be sent
message  (required) A ForwardMessage object

Example Request -JSON
POST
https:/ / isatdatapro.orbcomm.com/GLGW/2/RestMessages.svc/ J SON/ su bm iLmessage_to_destinations
POST https://isatdatapro.orbcomm.com/GLGW/2/RestMessages.svc/JSON/submit_message_to_destinations/ HTTP/1.1 Content-Type: application/ json; charset=utf-8 Host: 172.20.101.174 Content-Length: 165 Expect: 100-continue Connection: Keep-Alive
"access_id" : "70000001", "password": "password", "destinations": "01000056SKY1A95,01000056SKY1A95", "message": {
"DestinationID": ""
I
"UserMessageID": 0,
"RawPayload": [16,1]
Example Response -JSON
"ErrorID": 0,
"Submissions":
"ForwardMessageID": 1209936, "DestinationID": "01000056SKY1A95",
"ErrorID": O,
"UserMessageID": 0 },
"ForwardMessageID": 1209937, "DestinationID": "01000056SKY1A95",
"ErrorID": O,
"UserMessageID": 0

Example Request -XML
POST

https://isatdatapro.orbcomm.com/GLGW/2/RestMessages.svc/XMUsubmiUnessage_to_destinations
POST https://isatdatapro.orbcomm.com/GLGW/2/RestMessages.svc/XML/submit_message_to_destinations.xml/ HTTP/1.1 Content-Type: application/xml; charset=utf-8 Host: ott-svrbaskilap.orbcomm.com Content-Length: 410 Expect: 100-continue Connection: Keep-Alive
<SubmitForwardMessageToMultipleDestinations xmlns="IGWS"> <access_id>70000006</access_id> <password>password</password>
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 63
<destinations>01000056SKY1A95,01000056SKY1A95</destinations>
<message xmlns:i="http://www.w3.org/2001/XMLSchema-instance"> <DestinationID i:nil="true" xmlns=""/> <UserMessageID xmlns="">O</UserMessageID> <RawPayload xmlns="">EAE=</RawPayload>
</message> </SubmitForwardMessageToMultipleDestinations>
Example Response -XML
<?xml version="l.0" encoding="utf-8"?> <SubmitMessagesResult xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/200l/XMLSchema">
<ErrorID>O</ErrorID> <Submissions>
<ForwardSubmission> <ForwardMessageID>l209991</ForwardMessageID> <DestinationID>01000056SKY1A95</DestinationID> <ErrorID>O</ErrorID> <UserMessageID>O</UserMessageID>
</ForwardSubmission>
<ForwardSubmission> <ForwardMessageID>1209992</ForwardMessageID> <DestinationID>01000056SKY1A95</DestinationID> <ErrorID>O</ErrorID> <UserMessageID>O</UserMessageID>
</ForwardSubmission> </Submissions> </SubmitMessagesResult>


7 .11 submiLcancelations
Submits cancellation request for specified messages. Equivalent to SOAP web service operation SubmitMessageCancelations().
Rate limited: Yes
Requires authentication: Yes
Response formats: JSON, XML
HTTP methods: GET
Resource URL
https:/ /isatdata pro.orbcomm .com/GLGW /2/RestMessages.svc/ JSON/subm iLcancelations/
https:/ /isatd ata pro.orbcom m .com/GLGW /2/RestMessages.svc/XMUsubm it_cancelation s/
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 64
Parameters
access_id  (required) Customers' IDP Gateway access ID
password  (required) Customers' IDP Gateway password
fw/Ds  (required) List of comma-separated IDs of messages that need to be canceled

Example Requests -JSON
https:/ /isatdata pro.orbcomm.com/GLGW/2/RestMessages.svc/ JSON/ subm iLcancelation s/?access id=700003 52&password =KP0TH GB6&fwIDs= 1209992
Example Response -JSON
The following response is for a case when the message cannot be canceled because it has already been sent to a terminal.
"ErrorID": O, "Submissions" :
"ForwardMessageID": 0, "DestinationID" : ""
'
"ErrorID" : 115, "UserMessageID" : 0
Example Requests -XML
https:/ /isatd ata pro.orbcomm.com/GLGW/2/RestMessages.svc/XMU su bm it_cancelation s/?access_ id=700003 52&password =KP0TH GB6&fwIDs= 1209992
Example Response -XML
<?xrnl version="l .0" encoding="utf-8"?> <SubmitMessagesResult xrnlns:xsi="http://www.w3.org/200l/XMLSchema-instance" xrnlns:xsd="http: //www.w3.org/200l/XMLSchema">
<ErrorID>O</ErrorID> <Submissions>
<ForwardSubmissi on> <ForwardMessageID>O</ForwardMessageID> <DestinationID/> <ErrorID>ll5</ErrorID> <UserMessageID>O</UserMessageID>
</ForwardSubmission> </Submissions> </SubmitMessagesResult>
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
66

8 USING IGWS 2 -SOAP CLIENT CODE SNIPPETS IN C#
This section presents and describes sample.NET C# code using the SOAP interface of the IGWS 2. You can find the full source code of the sample class is in APPENDIX D.
The examples in this section apply to both terminal and modem (IDP-180 and IDP-280) users unless noted otherwise. All code snippets in this section were written in Microsoft Visual Studio� 2015 and use Microsoft� .Net Framework 4.5.
8.1 Create a Web Service Proxy Instance and Set the URL
The following sample shows how to initialize the web service proxy.
using System; using System . Collections.Generic; using System.Ling; using System . Text; using System . Threading.Tasks ; using System . Net; using System . Net . Security; using System . Security.Cryptography.X509Certificates ; using IDPClient . IGWS ; namespace IDPClient.DocumentationSamples
class IDPGatewayClient
private static IGWS.Gatewayinterface igwsSvc; private static String myAccessID; private static String myPassword; private static int pollingintervalinSeconds 2 ; private void initWSAcecss()
II Create an instance of the web service proxy class igwsSvc -new Gatewayinterface() ; II Set the web service URL igwsSvc.Url -"https:llisatdatapro.orbcomm.comlGLGWl21Messages.svc"; II Set the time the Web service client waits for a synchronous II XML Web service request to complete (in milliseconds) . igwsSvc.Timeout -30 * 1000; II Set it to 30 seconds for this sample II Set the access ID and password that has been assigned to the client myAccessID "70000010 " ; myPassword "AX08975JHD" ;
// Add support for different security protocols
ServicePointManager . SecurityProtocol -SecurityProtocolType . Tls SecurityProtocolType . Tlsll SecurityProtocolType . Tls12 SecurityProtocolType . Ssl3 ;
8.2 Retrieve Account Information
After initializing the web service proxy, the client can get some information from the IGWS 2 that it might need in the application.
The following code sample shows how to get the list of all Gateway error codes and a list of terminals associated with the client account.
If the client account is a super-account and has access to terminals from other IGWS 2 accounts, the client can get a list of its subaccounts.
In the following code snippet, the method getlGWSlnformation calls the IGWS 2 and retrieves the client account information. Retrieved information about terminals, subaccounts, and errors will be placed to instances of Dictionary class.
I I I <summary>
/ / / wsErrorCodes dictionary can be used to get the name and description of /// errors received from the Gateway. The next code snippet shows how to use it.
I I I </ summary>
private static Dictionary<int, Errorinfo> wsErrorCodes new Dictionary<int, Errorinfo>();
I I I <summary>
/// igwsUTC will contain current Gateway UTC time . We can use that as a starting /// high-watermark for message polling
/// </summary>
private static String igwsUTC;
I I I <summary>
ill Dictionary of all subaccounts associated to account 70000010
I I I </ summary>
private static Dictionary<String, Subaccountinfo> mySubaccounts =
new Dictionary<string, Subaccountinfo>(); I I I <summary> Ill Dictionary of all terminals associated to account 70000010 I I I <Isummary> private static Dictionary<String, Terminalinfo> myTerminals =
new Dictionary<string, Terminallnfo>() ; private void getIGWSinformation()
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
try
ii --Get basic IGWS information: current UTC and error names
IGWSinformationResponse igwsinformation igwsSvc.IGWSinformation( accessID : myAccessID, password: myPassword, getErrorCodes : true);
if(igwslnforrnation != null && igwsinformation . ErrorID == OJ
igwsUTC = igwsinformation.UTC; if (igwsinforrnation . ErrorCodes != null)
foreach (Errorinfo errorlnfo in igwsinformation.ErrorCodes) wsErrorCodes .Add(errorinfo . ID, errorinfo) ;
ii --Get a list of subaccounts from the IGWS GetSubaccountinfoResult subaccountResult = igwssvc.GetSubaccountinfos(
accessID : myAccessID, password: myPassword) ; // Store subaccounts to a dictionary if (subaccountResult != null &&
subaccountResult . ErrorID O && subaccountResult . Subaccounts != null && subaccountResult . Subaccounts.Length > O
II --Add subaccounts to the mySubaccounts dictionary foreach (Subaccountinfo subAccountinfo in subaccountResult . Subaccounts) mySubaccounts .Add(subAccountinfo .AccountID, subAccountinfo);
else if (subaccountResult != null && subaccountResult . ErrorID > 0 )
II --Log a problem igwsErrorHandler(subaccountResult . ErrorID, '' GetSubaccountinfos'' );
II Get a list of terminals from the IGWS. Retrieve up to pageSize (500) per call. II If the client account contains more than <pageSize> terminals, you will have II to call the GetTerminlsinfo multiple times .
bool terminalRetrievalCompleted false ; String startID =
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
69
do
GetTerminalsinfoResult terminalsinfo = igwsSvc . GetTerminalsinfo( accessID: rnyAccessID, password: myPassword, subaccountID : null, sinceID: startID,
pageSize : 500);
if (terrninalsinfo != null &&
terminalsinfo.ErrorID O && terminalsinfo . Terminals != null && terrninalsinfo.Terrninals . Length > OJ
ii --Add terminals to the rnyTerminals dictionary foreach (Terminalinfo mtinfo in terminalsinfo . Terminals)
myTerminals .Add(mtinfo . PrimeID, mtinfo); II Next call should retrieve next page of 500 terminals // Take the PrimeID of the last received terminal and pass it as a // sinceID parameter of the next GetTerminalsinfo call.
startID terminals Info. Terminals. Last () . PrimeID;
else terminalRetrievalCompleted = true; if {terminalsinfo != null && terminalsinfo.ErrorID > 0)
igwsErrorHandler (terminalsinfo .ErrorID, "GetTerminalsinfo");
while ( !terminalRetrievalCompleted) ;
catch (Exception ex )
Console.WriteLine($"getIGWSinformation exception: (ex .Message}") ;


8.3 Query for To-Mobile Message Status Changes
Client applications should periodically poll for status changes of submitted to-mobile messages. If required, the client can also explicitly ask for a status of one or more submitted to-mobile messages.
The following code snippet queries for status changes using a time stamp based high-watermark.
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
10
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
II --Set initial high-water mark String startFwStatusUTC = igwsUTC ; // Start polling using the current Gateway UTC time int pollingintervalinSeconds = 30; bool moreToDo = true; while (moreToDo)
try
ii --Get new forward message status changes
GetForwardStatusesResult fwStatusesResponse = igwsSvc.GetForwardStatuses( accessID: rnyAccessID, password : myPassword, filter : new ForwardStatusFilter()
StartUTC startFwStatusUTC
}) ;
if (fwStatusesResponse != null && fwStatusesResponse.ErrorID O && fwStatusesResponse . Statuses != null && fwStatusesResponse . Statuses.Length > 0)
II --Get the next StartUTC, but only if Statuses array is not empty startFwStatusUTC = fwStatusesResponse.NextStartUTC ; II Process received status changes processForwardStatuses(statusArray: fwStatusesResponse.Statuses);
else
II Check if the call failed with an error if (fwStatusesResponse != null && fwStatusesResponse . ErrorID > 0)
II Log the error (fwStatusesResponse.ErrorID) igwsErrorHandler(fwStatusesResponse.ErrorID, "GetForwardStatuses'' );
catch (Exception ex)
II Handle the exception Console.WriteLine($''startPolling exception: {ex.Message}'');
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 71
II --Enforce call frequency limits, wait for pollingintervalinSeconds seconds
// before polling again
Task . Delay(pollingintervalinSeconds * 1000) .Wait() ;
I I I <summary>
Ill Processing of received forward message status changes
I I I <Isummary>
Ill <param name="statusArray"></pararn>
private void processForwardStatuses(ForwardStatus[] statusArray)
foreach(ForwardStatus st in statusArray)
Console.WriteLine($"Status of message {st . ForwardMessageID} changed to {st . State} " ) ;
You can also set the ForwardMessagelDs property of the GetForwardStatuses' filter, but that is not a recommended way to query for message status changes. The ForwardMessagelDs property contains an array of, up to 100, to�mobile message IDs whose status you want to query. That option is meant mostly for development and debugging purposes. For regular polling, use time stamp based high-watermarks.
8.4 Poll for From-Mobile Messages
The best way to get all client messages from the IGWS 2 is to poll it regularly. The client starts polling the Gateway using an initial time stamp, and then the Gateway provides time stamp updates needed to get new messages.
Note: ORBCOMM requires using UTC time instead of your local time for time stamps.
II --Set initial high-water mark String startReUTC -igwsUTC; II Start polling using the current Gateway UTC time int pollingintervalinSeconds 30 ; bool rnoreToDo = true; while (moreToDo)
try
II --Get new return-link messages
GetReturnMessagesResult reMessageResponse -igwsSvc.GetReturnMessages( accessID : myAccessID , password : myPassword, filter: new ReturnMessageFilter()




, JI:.\
N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
V n
StartUTC startReUTC }) ;
if (reMessageResponse !-null && reMessageResponse . ErrorID 0 && reMessageResponse.Messages !-null && reMessageResponse.Messages.Length > 0)
II --Get the next StartUTC, but only if Messages array is not empty startReUTC -reMessageResponse . NextStartUTC ; II Process received return-link messages processReMessages(reMessageArray : reMessageResponse .Messages);
else
II Check if the call failed with an error if (reMessageResponse !-null && reMessageResponse.ErrorID > 0)
// Log the error (reMessageResponse.ErrorID) igwsErrorHandler(reMessageResponse . ErrorID, "GetReturnMessages");
catch (Exception ex)
// Handle the exception Console.WriteLine($"startPolling exception: {ex.Message} ");
// Enforce call frequency limits, wait for pollingintervalinSeconds seconds // before polling again Task.Delay(pollingintervalinSeconds * 1000) .Wait() ;
Ill <summary> /// Processing of received return-link messages Ill </summary> Ill <param name-"reMessageArray"></param> private void processReMessages(ReturnMessage[] reMessageArray)
foreach(ReturnMessage reMessage in reMessageArray)
Console.WriteLine($ "Received message (reMessage . ID) " ) ;
In this sample, the client starts requesting messages using the current Gateway UTC time. The code polls the Gateway once every 30 seconds.
Each time the client receives from-mobile messages and/or to-mobile message updates, it also receives a NextStartUTC that represents the client's high-watermark for getting the latest messages.
The most common mistake client applications make, is not using the value from the NextStartUTC in the next GetReturnMessages call. If your code does not correctly update the StartUTC property of the ReturnMessageFilter, the Gateway will return the same set of from-mobile messages with each call.
8.5 Poll for Subaccounts' From-Mobile Messages
There are two ways to retrieve messages from subaccounts' terminals:
�
For each subaccount, call GetReturnMessages and supply a subaccount ID in the filter object.

�
Call the GetSubaccountsReturnMessages web service operation.


Call GetReturnMessages:
The following code snippet polls for from-mobile messages that belong to subaccount 60000012. You need to set the SubAccountlD property of the ReturnMessageFilter object to the value of subaccount ID whose messages you want to retrieve.
If you have several subaccounts whose messages you want to retrieve, you would have to maintain separate high�watermarks for each subaccount. The following example retrieves messages only from one subaccount and therefore maintains only one high-watermark (startReUTC).
II --Set initial high-water mark
String subAccountHighWaterMark = igwsUTC; // Start polling using the current Gateway UTC time
int pollingintervalinSeconds = 30 ;
bool moreToDo = true;
while (rnoreToDo)
try
II --Get new return-link messages
GetReturnMessagesResult reMessageResponse = igwsSvc.GetReturnMessages(
accessID: rnyAccessID, password : myPassword,
filter : new ReturnMessageFilter()
StartUTC = subAccountHighWaterMark,
SubAccountID = "60000012 "
}) ;
if (reMessageResponse != null &&
reMessageResponse.ErrorID == O && reMessageResponse .Messages != null && reMessageResponse .Messages.Length > 0)
ii --Get the next StartUTC, but only if Messages array is not empty subAccountHighWaterMark = reMessageResponse.NextStartUTC; ii Process received return-link messages processReMessages(reMessageArray: reMessageResponse.Messages);
else
II Check if the call failed with an error if (reMessageResponse != null && reMessageResponse.ErrorID > OJ
// Log the error (reMessageResponse.ErrorID)
igwsErrorHandler ( reMessageResponse . ErrorID, " GetReturnMessages " ) ;
catch (Exception ex )
// Handle the exception Console.WriteLine($"startPolling exception: {ex.Message}") ;
II Enforce call frequency limits, wait for pollingintervalinSeconds seconds II before polling again Task.Delay(pollingintervalinSeconds * 1000) .Wait();
Call GetSubaccountsReturnMessages:
The following code snippet retrieves from-mobile messages that belong to the client account and all its subaccounts. It allows you to use a single high-watermark and a single web service call to retrieve all your account and subaccount messages. Unlike GetReturnMessages, that can retrieve a maximum of 500 messages per call, the GetSubaccountsReturnMessages can return up to 500 messages per account/subaccount, but the query period is limited to a 5-minute interval after the high-watermark time stamp you specify. Because of that, unless an error occurs, the NextStartUTC value returned with the response object is valid even if the response contains no messages. That is not the case with the NextStartUTC returned with the response of the GetReturnMessages call.
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
II --Set initial high-water mark String highWaterMark = igwsUTC ; / / Start polling using the current Gateway UTC time int pollingintervalinSeconds 30 ; bool moreToDo = true; while (rnoreToDo)
try
II --Get new return-link messages from mine and all my subaccounts ' terminals
GetReturnMessagesResult reMessageResponse = igwsSvc.GetSubaccountsReturnMessages( accessID: myAccessID, password : rnyPassword, startUTC: highWaterMark, includeRawPayload: false, includeType: false
);
if (reMessageResponse != null && reMessageResponse . ErrorID 0)
ii --Get the next StartUTC, valid even if no messages were retrieved highWaterMark = reMessageResponse.NextStartUTC; if (reMessageResponse.Messages != null &&
reMessageResponse.Messages.Length > 0)
II Process received return-link messages processReMessages (reMessageArray: reMessageResponse .Messages) ;
else
II Check if the call failed with an error if (reMessageResponse != null && reMessageResponse.ErrorID > 0)
II Log the error (reMessageResponse.ErrorID) igwsErrorHandler (reMessageResponse. ErrorID, "GetSubaccountsReturnMessages") ;
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
76
catch (Ex ception e x )
// Handle the exception Console.WriteLine($�startPolling ex ception: {ex.Message}�) ;
// Enforce call frequency limits, wait for pollingintervalinSeconds seconds // before polling again Task.Delay(pollingintervalinSeconds * 1000) . Wait() ;

8.6 Submit a To-Mobile Message
The following code snippets shows several ways of sending to-mobile messages to the terminals.
Terminal Example
public void SubrnitTerrninalMesssagesSarnple()
II Create array of Forward.Message objects Forward.Message[] messages= new Forward.Message[3] ;
// Message 1 --------------------------------�// A simple binary message (reset -see [T203] for more details) messages[O] = new Forward.Message(); messages [0] . DestinationID "00300050SKY1A97" ; messages [ OJ . UserMessageID 1;
messages[O] . RawPayload = new byte[] { Ox OO , Ox 44, Ox OO }; // Message 2 --------------------------------�// A simple customer specific message in a binary format . In case a customer defined II a message where SIN 128, MIN= 1, and a content of 8 bytes, this would be ii a way to send it in a binary form.The first byte is SIN, the second byte is MIN, // and the rest is its content . messages[!] = new Forward.Message() ; messages[!] .DestinationID "00300050SKY1A97"; messages[!] . UserMessageID 2 ; messages[!] .RawPayload = new byte[] 0x80 , 0x0l, 0x0l, 0x02 , 0x 03 , 0x 04, 0x05, 0x06, 0x 07, 0x 08}; // Message 3 II The reset message using common message format . // Payload fields in the e xample below do not apply to the modem . // Use the RawPayload only.
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
V n
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
messages[2] = new Forward.Message() ; messages[2] . DestinationID "00300051SKY1A97"; messages[2] .UserMessageID 3; messages[2] .Payload= new Message(); messages[2] . Payload . SIN 0; messages[2] .Payload.MIN Ox 44 ; messages[2] . Payload . Fields= new Field[l] ; messages[2] . Payload . Fields[O] = new Field() ;
messages [2]. Payload. Fields [0] .Name = "resetType";
messages [2] . Payload . Fields [ 0] . Value = "ModemPreserve";
// Submit messages and check Gateway ' s response
SubmitMessagesResult submitResult = igwsSvc . SubmitForward.Messages( accessID: myAccessID, password: myPassword, messages: messages) ;
if (submitResult != null
&& submitResult . ErrorID == 0 && submitResult.Submissions != null)
foreach (ForwardSubmission submissioninfo in submitResult.Submissions)
if (submissioninfo . ErrorID 0)
Console.WriteLine( ''Message (UserID={O}) accepted, Gateway assigned ID : {l} '', submissioninfo.UserMessageID, submissioninfo . ForwardMessageID) ;
else
Console.WriteLine("Gateway rejected a message (UserID={O}): [{l}] : {2} -{3}", submissioninfo .UserMessageID, submissioninfo . ErrorID, wsErrorCodes[submissioninfo . ErrorID] .Name, wsErrorCodes[submissioninfo.ErrorID] . Description) ;
else if (submitResult != null)
Console. Wri teLine ( "Error calling Submi tForwardMessages: [ { O}] : { 1} -{ 2} ", submitResult.ErrorID,
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 78
wsErrorCodes[submitResult . ErrorID] .Name, wsErrorCodes[submitResult . ErrorID] .Description);
After the client submits the messages, it receives a result object back from the Gateway. Its ErrorlD field indicates if the web service call succeeded or not, and its Submissions field contains information related to each to-mobile message.
Each ForwardSubmission record tells the client whether the Gateway has accepted the message (ErrorlD=O) or not (ErrorlD>O). If the message has been accepted, the client gets ForwardMessagelD assigned to that message. If the client provided a UserMessagelD, it gets it back, so it can pair this ID with the one generated by the Gateway.
Modem Example (IDP-180 and IDP-280)
public void SubmitModemMesssagesSample()
// Create array of ForwardMessage objects
Forward.Message[] messages= new Forward.Message[2];
// Message 1 --------------------------------�// A simple binary message (reset -see [T203] for more details) messages[O] = new ForwardMessage(); messages [O] . DestinationID "00300050SKY1A97" ;
messages [ O] . UserMessageID 1;
messages[O] . RawPayload = new byte[] { OxOO , Ox44, Ox OO }; // Message 2 --------------------------------�
// A simple customer specific message in a binary format . In case a customer defined II a message where SIN=l28 and a content of 8 bytes, this would be a way to send II it in a binary form. The first byte is SIN and the rest is its content .
messages[l] = new ForwardMessage(); messages [1] . DestinationID "00300050SKY1A97" ;
messages [l] . UserMessageID  2;
messages[l] . RawPayload  = new byte[]  Ox BO ,  OxOl,  Ox 02 ,  Ox 03 ,  Ox 04 ,
Ox05,  Ox 06 ,  Ox 07,  OxOB};

II Submit messages and check Gateway ' s response
SubmitMessagesResult submitResult = igwsSvc . SubmitForwardMessages (
accessID : myAccessID, password : myPassword,
messages: messages) ; if (submitResult != null && submitResult . ErrorID == O && submitResult.Submissions != null)
foreach (ForwardSubmission submissioninfo in submitResult.Submissions)
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
79
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
if (submissioninfo . ErrorID 0)
Console. Wri teLine ( "Message (User message ID={ O}) accepted, Assigned ID: { 1} ",
submissioninfo.UserMessageID, submissioninfo.Forward.MessageID);
else
Console .WriteLine( "Message (User message ID={O}l rejected: [{1}]: {2} -{3} " ,
submissioninfo.UserMessageID,
submissioninfo.ErrorID,
wsErrorCodes[submissioninfo . ErrorID] . Name,
wsErrorCodes[submissioninfo.ErrorID] . Description) ;
else if (subrnitResult != null && subrnitResult.ErrorID > 0)
Console .WriteLine( "Error calling SubmitForwardMessages: [{0}] : {1} -{2}" , subrnitResult.ErrorID, wsErrorCodes[submitResult . ErrorID] .Name, wsErrorCodes[submitResult.ErrorID] .Description);
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
V so



9 USING IGWS 2 -REST CLIENT CODE SNIPPETS IN C#
The following code snippets show the minimum code required to query from-mobile messages from the JSON REST based on IGWS 2. All code snippets in this section were written in Microsoft Visual Studio� 2015 and use Microsoft� .Net Framework 4.5.
You can find the full source code of the sample class is in APPENDIX E.
9.1 Data Classes
When you use the SOAP web service interface, in most cases, your development tools will generate proxy classes based on web services' WSDL file. When you access REST based web services, you need to create the data classes. The following classes can be used for retrieving from-mobile messages
public class GetReturnMessagesResult
public int ErrorID { get; set; } = 0; public String NextStartUTC { get; set; } = ""; public ReturnMessage[] Messages { get; set; } = null;
public class ReturnMessage
public ulong ID { get; set; } = 0; public String MessageUTC get; set; ""; public String ReceiveUTC get; set; ""; public int SIN { get; set; } = 0; public String MobileID { get; set; } = ""; public System.Byte[] RawPayload { get; set; } = null; public CommonMessage Payload { get; set; } = null; public String RegionName { get; set; } ""; public int? OTAMessageSize { get; set; } = null; public int? CustomerID { get; set; } = null; public int Transport { get; set; } = 0;
public partial class CommonMessage
public Field[] Fields { get; set; } = null; public string Name { get; set; } = ""; public int SIN get; set; 0; public int MIN get; set; 0; public string IsForward { get; set; "";
public partial class Field
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
V a,
public Element[] Elements { get; set; ) = null; public CommonMessage Message { get; set; ) = null; public string Name { get; set; ) = "" ; public string Value { get; set; } = ""; public string Type { get; set; } = "";
public partial class Element
public Field[] Fields { get; set; } = null; public int Index { get; set; ) = -1;
9.2 Retrieve From-Mobile Messages
The following code snippet uses JSON REST web service interface to retrieve from-mobile (return-link) messages and map them to objects of classes defined in the previous section.
using System;
using System . Net.Http; using System . Net.Http . Headers ; narnespace IDPRESTClient . DocurnentationSarnples
public class IDPGatewayRestClient
static String gwRestBaseURL = "https://isatdatapro . swlab.ca : 8143/GLGW/2/RestMessages . svc/JSON/" ; static String rnyAccessID "70000934 "; static String myPassword "password"; public void JsonigwsClientSample_GetReturnMessages(bool compression=false)
String wsOperation = "get_return_messages "; String startUTC -"2016-10-21 14:45:00"; HttpClient client= new HttpClient();
client . BaseAddress = new Uri($ " {gwRestBaseURL}{wsOperation} " ); string urlParameters = $ " ?access_id={myAccessID}&password={myPassword}&start utc={startUTC} ";
client . DefaultRequestHeaders.Accept.Add( new MediaTypeWithQualityHeaderValue("application/json'' )) ;
// Set this to prevent 1 The maximum message size quota for incoming // messages (65536) has been exceeded ' exceptions client .MaxResponseContentBufferSize = int .MaxValue;
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
HttpResponseMessage response= client.GetAsync(urlPararneters) . Result; if (response.IsSuccessStatusCode)
II Parse the response body. var responseObject = response.Content.Read.AsAsync<GetReturnMessagesResult>() .Result; if (responseObject != null)
// Handle the response ...



10 USING IGWS 2 -SOAP CLIENT CODE SNIPPETS IN JAVA
This section presents and describes sample Java code using the SOAP interface of the IGWS 2. You can find the full source code of the sample class is in APPENDIX F. The samples in this section apply to both terminal and modem (IDP-180 and IDP-280) users unless noted otherwise. The following samples use JDK 1.8.0_7 02 and wsimport to create Java proxy classes from the IGWS 2 WSDL file.
wsimport -B-XautoNameResolution -keep https://isatdatapro.orbcomm.com/GLGW/2/Messages.svc?singleWsdl
10.1 Create a Web Service Proxy Instance and Set the URL
The following sample shows how to initialize the web service proxy.
The following sample shows how to initialize the web service proxy .
import java.util.HashMap; import java.util.List; import java.util.Map; import javax . xrnl.ws.BindingProvider; import javax.xml.namespace.QName; import java . net .URL ; import java.util.concurrent.* ;
import igws.* ;
public class IDPGatewayClient
final static String gwURL = "https://isatdatapro.swlab. ca:8143/GLGW/2/Messages.svc" ; final static String gwQue="IGWS"; final static String gwinterface='' Gatewayinterface'' ;
final static String myAccessID "70000934" ; final static String myPassword ''password" ;
final static int pollingintervalinSeconds 30 ; // poll the IGWS once every 30 seconds
!Messages igwsSvc ;
// igwsUTC will contain current Gateway UTC time . We can use that as a starting // high-watermark for message polling private static String igwsUTC ;
private void initWSAcecss ( )
try
Gatewayinterface service= new Gatewayinterface(new URL(gwURL), new QNarne(gwQue, gwlnterface)) ; igwsSvc = service . getIGWS() ;
// Set connection and request timeouts Map<String, Object> ctxt = ((BindingProvider) igwsSvc) .getRequestContext();
int timeout 30 * 1000; // Set it to 30 seconds for this sample
ctxt.put{ "com.sun. xrnl.ws.developer.JAXWSProperties.CONNECT_TIMEOUT" , timeout);
ctxt.put(''com. sun.xml.ws.connect.timeout'', timeout) ;
ctxt.put{"com.sun.xrnl.ws.internal.connect.timeout", timeout);
ctxt.put( ''corn.sun.xml .ws.request .timeout'', timeout) ;
ctxt.put{ "com.sun. xrnl.internal.ws.request.timeout", timeout);
catch (Exception e)
Systern.out.println(e);
10.2 Retrieve Account Information
After initializing the web service proxy, the client can get some information from the IGWS 2 that it might need in the application.
The following code sample shows how to get the list of all Gateway error codes and a list of terminals associated to the client account.
If the client account is a super-account and has access to terminals from other IGWS 2 accounts, the client can also get a list of its subaccounts.
In the following code snippet, the method getlGWSlnformation calls the IGWS 2 and retrieves client account information. Retrieved information about terminals, subaccounts, and errors will be placed to instances of Dictionary class.
private void getIGWSinforrnation()
try
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
as
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
II --Get basic IGWS information IGWSinformationResponse2 igwsinforrnation igwssvc.igwsinformation(myAccessID, myPassword, true); if(igwsinformation != null && igwsinforrnation.getErrorID() 0)
igwsUTC = igwsinforrnation.getUTC{); Systern.out.println("Connected to IDP Gateway web service version " + igwsinformation . getVersion());
if (igws Information. getErrorCodes () ! = nul1)
List<Errorlnfo> errorlnfos igwsinforrnation . getErrorCodes () . getErrorinfo ();
for (Errorlnfo errorlnfo: errorlnfos) wsErrorCodes.put{errorinfo.getID{), errorinfo) ;
else{ System . out.println( "getIGWSinformation error: " + igwsinforrnation.getErrorID());
II --Get a list of subaccounts from the IGWS GetSubaccountinfoResult subaccountResult igwssvc . getSubaccountinfos(myAccessID, myPassword); if (subaccountResult != null && subaccountResult . getErrorID() O && subaccountResult.getSubaccounts() != null)
List<Subaccountinfo> subaccountList = subaccountResult . getSubaccounts () . getSubaccountinfo () ;
for (Subaccountinfo subAccountinfo: subaccountList) mySubaccounts .put(subAccountinfo.getAccountID() , subAccountinfo);
// Get a list of terminals from the IGWS . Retrieve up to pageSize (500) per call. // If the client account contains more than <pageSize> terminals, you will have // to call the GetTerminlsinfo multiple times.
boolean terminalRetrievalCompleted false ; String startID =
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 86
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
do
GetTerminalsinfoResult terminalslnfo = igwsSvc.getTerminalsinfo( rnyAccessID, myPassword, null, startID, 500) ;
if (terminalsinfo != null && terminalsinfo.getErrorID() & & terminalslnfo. getTerminals () != null )
II --Add terminals to the rnyTerrninals dictionary List<Terminalinfo> terminalList = terrninalsinfo.getTerminals{) .getTerrninalinfo(); if(terrninalList.size() > 0)
for (Terminalinfo mtinfo: terminalList) myTerrninals.put(mtinfo.getPrirneID() , rntinfo) ;
II Next call should retrieve next page of 500 terminals. ii Take the PrirneID of the last received terminal and pass // it as a sinceID parameter of the next GetTerminalsinfo call. startID = terminalList . get (terminalList. size () -1 l . getPrimeID () ;
else terminalRetrievalCompleted true;
else terminalRetrievalCompleted true;
if (terminalsinfo != null && terminalsinfo . getErrorID() > OJ
igwsErrorHandler (terminalsInfo. getErrorID (), "getTerminalsinfo") ;
} while ( ! terminalRetrievalCompleted) ;
catch (Exception e)
11
System.out .println("IGWS exception: + e . getMessage() ) ;
10.3 Query for To-Mobile Message Status Changes
After the client submits a message, if it is polling the IGWS 2 regularly for new messages, it gets both the from-mobile messages and updates of the submitted to-mobile messages. If required, the client can also explicitly ask for a status of one or more submitted to-mobile messages.
The following code snippet queries for status changes using a time stamp based high-watermark.
// Try to retrieve new forward message status changes private String retrieveNewForwardMessageStatusChanges(String startUTC) throws Exception
String nextStartUTC startUTC ;
ForwardStatusFilter fwFilter = new ForwardStatusFilter(); fwFilter . setStartUTC(startUTC) ;
GetForwardStatusesResult fwStatusesResponse igwssvc . getForwardStatuses(rnyAccessID, myPassword, fwFilter) ; if(fwStatusesResponse != null && fwStatusesResponse . getErrorID() O && fwStatusesResponse.getStatuses() != null &&
fwStatusesResponse.getStatuses () . getForwardStatus () . size () > 0)
II --Get the next StartUTC, but only if Statuses array is not empty nextStartUTC = fwStatusesResponse.getNextStartUTC();
II Process received return-link messages processFwMessageStatusChanges(fwStatusesResponse.getStatuses() . getForwardStatus()) ;
else if(fwStatusesResponse != null && fwStatusesResponse.getErrorID() > 0)
igwsErrorHandler (fwStatusesResponse. getErrorID (), "getForwardStatuses");
return nextStartUTC;
II Your message processing function would be implemented here private void processFwMessageStatusChanges(List<ForwardStatus> fwStatuses)
for(ForwardStatus statusChange: fwStatuses) Systern.out.println("Status of message"+ statusChange.getForwardMessageID() + "changed to"+ statusChange.getState());
You can also set the ForwardMessagelDs property of the GetForwardStatuses' filter, but that is not a recommended way to query for message status changes. The ForwardMessagelDs property contains an array of, up to 100, to�mobile message IDs whose status you want to query. That option is meant mostly for development and debugging purposes. For regular polling, use time stamp based high-watermarks.

10.4 Poll for From-Mobile Messages
The best way to get all client messages from the IGWS 2 is to regularly poll it. The client starts polling the Gateway using an initial time stamp, and then the Gateway provides time stamp updates needed to get new messages.
Note: ORBCOMM recommends using UTC time instead of your local time for time stamps.
// Try to retrieve new messages private String retrieveNewReturnLinkMessages(String startUTC) throws Exception
String nextstartUTC startUTC;
ReturnMessageFilter reFilter = new ReturnMessageFilter(); reFilter . setStartUTC(startUTC) ;
GetReturnMessagesResult reMessageResponse igwsSvc . getReturnMessages(myAccessID, rnyPassword, reFilter); if(reMessageResponse != null && reMessageResponse .getErrorID() O &&
reMessageResponse . getMessages () ! = nul 1 & &
reMessageResponse . getMessages{) . getReturnMessage() . size() > 0)
II --Get the next StartUTC, but only if Messages array is not empty nextstartUTC = reMessageResponse.getNextStartUTC() ;
II Process received return-link messages processReMessages (reMessageResponse . getMessages() . getReturnMessage()) ;
else if(reMessageResponse != null && reMessageResponse .getErrorID () > 0)
igwsErrorHandler (reMessageResponse . getErrorID () , "getReturnMessages") ;
return nextstartUTC;
II Your message process ing function would be implemented here private void processReMessages(List<ReturnMessage> reMessages)
for(ReturnMessage rnsg : reMessages)
Systern.out . println("Received message '' + msg . getID()l ;
In this sample, the client starts requesting messages using the current Gateway UTC time. The code polls the Gateway once every 30 seconds, 20 times.
Each time the client receives from-mobile messages and/or to-mobile message updates, it also receives a NextStartUTC that represents the client's high-watermark for getting the latest messages.
The most common mistake client applications make, is not using the value from the NextStartUTC in the next GetReturnMessages call. If your code does not correctly update the StartUTC property of the ReturnMessageFilter, lsatData Pro gateway will retrieve the same set of from-mobile messages with each call.
10.5 Poll for Subaccounts' From-Mobile Messages
There are two ways to retrieve messages from subaccounts' terminals:
�
For each subaccount, call GetReturnMessages and supply subaccount ID in the filter object.

�
Call the GetSubaccountsReturnMessages web service operation.


Call GetReturnMessages:
The following code snippet polls for from-mobile messages that belong to subaccount 60000012. You need to set the SubAccountlD property of the ReturnMessageFilter object to the value of subaccount ID whose messages you want to retrieve.
If you have several subaccounts whose messages you want to retrieve, you would have to maintain separate high�watermarks for each subaccount. The following example retrieves messages only from one subaccount and therefore maintains only one high-watermark (startReUTC).
// Try to retrieve new messages
private String retrieveNewReturnLinkMessages(String startUTC) throws Exception
String nextStartUTC = startUTC;
ReturnMessageFilter reFilter = new ReturnMessageFilter();
reFilter . setStartUTC(startUTC) ;
reFilter . setSubAccountID( " 60000012");
GetReturnMessagesResult reMessageResponse = igwssvc . getReturnMessages(rnyAccessID,
myPassword, reFilter) ;
if(reMessageResponse != null && reMessageResponse .getErrorID() == O &&
reMessageResponse.getMessages () != null &&
reMessageResponse. getMessages () . getReturnMessage () . size () > 0)
II --Get the next StartUTC, but only if Messages array is not empty
nextStartUTC = reMessageResponse.getNextStartUTC() ;
II Process received return-link messages
processReMessages (reMessageResponse. getMessages () . getReturnMessage ()) ;
else if(reMessageResponse != null && reMessageResponse .getErrorID() > 0)
igwsErrorHandler ( reMessageResponse. getErrorID () , " getReturnMessages") ;
return nextStartUTC;
// Your message processing function would be implemented here private void processReMessages(List<ReturnMessage> reMessages)
for(ReturnMessage msg: reMessages) System.out .println( "Received message " + msg.getID()) ;

Call GetSubaccountsReturnMessages:
The following code snippet retrieves from-mobile messages that belong to the client account and all its subaccounts. It allows you to use a single high-watermark and a single web service call to retrieve all yours and your subaccounts' messages. Unlike GetReturnMessages, that can retrieve a maximum of 500 messages per call, the GetSubaccountsReturnMessages can return up to 500 messages per account/subaccount, but the query period is limited to a 5-minute interval after the high-watermark time stamp you specify. Because of that, unless an error occurs, the NextStartUTC value returned with the response object is valid even if the response contains no messages. That is not the case with the NextStartUTC returned with the response of the GetReturnMessages call.
II Try to retrieve new messages from the main account and all its subaccounts private String retrieveNewSubaccountsReturnLinkMessages(String startUTC) throws Exception
String nextstartUTC startUTC;
GetReturnMessagesResult reMessageResponse = igwssvc.getSubaccountsReturnMessages( myAccessID, myPassword, startUTC , false, false); if(reMessageResponse != null && reMessageResponse.getErrorID() == 0)
II --Get the next StartUTC, even if Messages array is not empty
nextStartUTC = reMessageResponse.getNextStartUTC();
// Process received return-link messages if (reMessageResponse. getMessages () != null & & reMessageResponse . getMessages () . getReturnMessage (l . size (l > 0)
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
processReMessages(reMessageResponse . getMessages() . getReturnMessage() ) ;
else if(reMessageResponse != null && reMessageResponse .getErrorID() > 0)
igwsErrorHandler ( reMessageResponse. getErrorID () , " getSubaccountsReturnMessages") ;
return nextStartUTC;



10.6 Submit a To-Mobile Message
The following code snippets shows several ways of sending to-mobile messages. Terminal Example
public void SubmitTerminalMesssagesSample() throws Exception
// Create array of ForwardMessage objects ArrayOfForwardMessage messages= new ArrayOfForwardMessage();
// Message 1 --------------------------------�// A simple binary message (reset -see [T203] for more details)
ForwardMessage msg = new ForwardMessage() ; msg.setDestinationID(mobileID) ; msg . setUserMessageID(Biginteger.valueOf(l)) ; msg.setRawPayload(new byte[] { OxOO, Ox44, OxOO }) ; messages . getForwardMessage() .add(msg) ;
II Message 2 --------------------------------�II A simple customer specific message in a binary format . In case a customer defined II a message where SIN 128, MIN= 1, and a content of 8 bytes, this would be II a way to send it in a binary form.The first byte is SIN, the second byte is MIN,
II and the rest is its content .
msg = new ForwardMessage(); msg . setDestinationID(mobileID) ; msg.setUserMessageID(Biginteger.valueOf(2)) ; msg.setRawPayload(new byte[] { (byte)OxBO, OxOl, OxOl, Ox02, Ox03, Ox04, Ox05, Ox06, Ox07, OxOB});
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
92
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
messages . getForwardMessage() .add(msg) ;
II Message 3 ii The reset message using common message format . // Payload fields in the example below do not apply to the modem. // Use the RawPayload only.
msg = new Forward.Message{); msg . setDestinationID(rnobileID) ; msg.setUserMessageID(Biginteger.valueOf(3) ) ;
Message payload= new Message (); payload.setSIN(OJ ; payload. setMIN(Ox44);
Field[] fields= new Field[2]; fields[O] -new Field () ;
fields [0]. setName ( "resetType") ;
fields[O] .setValue(''ModemPreserve'');
ArrayOfField arrayFields = new ArrayOfField() ; arrayFields.getField() . add(fields[O]);
payload.setFields (arrayFields) ; msg . setPayload(payload) ;
messages . getForwardMessage() .add(msg) ;
// Submit messages and check Gateway ' s response SubmitMessagesResult submitResult = igwsSvc . submitForwardMessages( myAccessID, myPassword, messages);
if (submitResult != null && submitResult . getErrorID() == 0 && submitResult . getSubmissions() != null)
List<ForwardSubmission> submissionresultList = submitResult. getSubmissions () . getForwardSubmission () ;
for(ForwardSubrnission submissioninfo: submissionresultList)
if (submissioninfo.getErrorID() null)
System.out.println("Message (UserID=" + submissioninfo.getUserMessageID() +
") accepted, " +
"Gateway assigned ID: " + subrnissioninfo.getForwardMessageID()l;
else
igwsErrorHandler(submissioninfo.getErrorID(), "submitForward.Messages for " + subrnissioninfo . getUserMessageID()l;
else if (subrnitResult != null)
igwsErrorHandler (submitResult. getErrorID (), "subrnitForwardMessages");
After the client submits the messages, it receives a result object back from the Gateway. Its ErrorlD field indicates if the web service call succeeded or not, and its Submissions field contains information related to each to-mobile message.
Each ForwardSubmission record tells the client whether the Gateway has accepted the message (ErrorlD=O) or not (ErrorlD>O). If the message has been accepted, the client gets ForwardMessagelD assigned to that message. If the client provided a UserMessagelD, it gets it back, so it can pair this ID with the one generated by the Gateway.
Modem Example (IDP-180 and IDP-280)
public void SubmitModemMesssagesSample() throws Exception
// Create array of ForwardMessage objects ArrayOfForward.Message messages= new ArrayOfForward.Message();
// Message 1 --------------------------------�// A simple binary message (reset -see [T203] for more details)
Forward.Message msg = new Forward.Message();
msg . setDestinationID(mobileID) ;
msg.setUserMessageID(Biginteger.valueOf(l));
msg . setRawPayload(new byte[] ( Ox OO , Ox44 , OxOO }) ;
messages. getForward.Message () . add (msg) ;
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
// Message 2 --------------------------------�// A simple customer specific message in a binary format. In case a customer defined ii a message where SIN=128 and a content of 8 bytes, this would be a way to send // it in a binary form . The first byte is SIN and the rest is its content.
msg = new Forward.Message(); msg.setDestinationID(mobileID); msg.setUserMessageID(Biginteger.valueOf(2)); msg.setRawPayload(new byte[] { (byte)Ox80, OxOl, Ox02, Ox03, Ox04,
Ox 05, Ox 06, Ox 07, Ox OB}}; messages . getForward.Message (). add {rnsg);
// Submit messages and check Gateway's response SubrnitMessagesResult submitResult = igwssvc.submitForward.Messages( myAccessID, rnyPassword, messages);
if (submitResult != null && submitResult.getErrorID() == O && submitResult . getSubmissions () != null)
List<ForwardSubmission> submissionresultList = submitResult. getSubmissions () . getForwardSubmission () ; for(ForwardSubmission submissioninfo: submissionresultList)
if (submissioninfo.getErrorID() null}
System.out.println("Message (UserID=11 + submissioninfo.getUserMessageID() + ") accepted, '' + " Gateway assigned ID: + submissioninfo.getForwardMessageID());
11
else
igwsErrorHandler(submissioninfo . getErrorID(), 11 submitForward.Messages for + submissioninfo . getUserMessageID());
11
else if (subrnitResult != null)
igwsErrorHandler (submitResult. getErrorID (), "subrnitForwardMessages");



11 USING IGWS 2 -REST CLIENT CODE SNIPPETS IN JAVA
The following code snippets show the code required to query from-mobile messages from the JSON REST based IGWS 2 web service. All code snippets in this section were written in Java (JDK 1.8.0_102) and use the following libraries.
�
Jackson -a multi-purpose Java library for processing JSON data format (http://wiki.fasterxml.com/ Jackson Home). Jar files used in code samples: � jackson-core-2.8.1.jar

� jackson-databind-2.8.1.jar � jackson-annotations-2.8.0.jar

�
Apache HTTP -a tool set of low-level Java components focused on HTTP and associated protocols (http://hc.apache.org/index.html). Jar files used in code samples: � org.apache.httpcomponents.httpcore_4.4.5.jar


� org.apache.httpcomponents.httpclient_4.5.2.jar � commons-logging-1.2.jar
You can find the full source code of the sample class in APPENDIX G.
11 .1 Data Classes
When you use the SOAP web service interface, in most cases, your development tools will generate proxy classes based on web services' WSDL file on your behalf. When you access REST based web services, you need to create your data classes. The following classes can be used for retrieving from-mobile messages:
public class GetReturnMessagesResult
public int ErrorID = O;
public String NextStartUTC = null ;
public ReturnMessage[] Messages= null;
public GetReturnMessagesResult()
public GetReturnMessagesResult(int ErrorID, String NextStartUTC, ReturnMessage[] Messages)
super();
this . ErrorID = ErrorID;
this . NextstartUTC = NextStartUTC;
this .Messages= Messages;
public class ReturnMessage
public long ID= 0; public String MessageUTC public String ReceiveUTC public int SIN; public String MobileID; public byte[] RawPayload; public Message Payload= null; public String RegionNarne; public int OTAMessageSize ; public int CustomerID; public int Transport;
public ReturnMessage()
public ReturnMessage(long ID, String MessageUTC , String ReceiveUTC, int SIN, String MobileID, byte[] RawPayload, Message Payload, String RegionName, int OTAMessageSize, int CustomerID, int Transport)
super();
this . ID=  ID;
this . MessageUTC  MessageUTC ;
this.ReceiveUTC  ReceiveUTC;
this . SIN=  SIN;

this.MobileID = MobileID; this . RawPayload = RawPayload; this.Payload= Payload; this . RegionNarne = RegionNarne ; this . OTAMessageSize = OTAMessageSize; this . CustornerID = CustornerID; this . Transport= Transport;
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
public class Message
public String Name �public int SIN 0;
public int MIN O; public String IsForward -"" � public Field[] Fields -null;
public Message()
public Message(String Name , int SIN, int MIN, String IsForward, Field[] Fields)
super();
this.Fields= Fields; this . Name= Name; this . SIN SIN;
this . MIN MIN;
this.IsForward = IsForward;
public class Field
public Element[] Elements= null; public Message Message= null; public String Name=" " ; public String Value=''"; public String Type=
public Field I I
public Field(Element[] Elements, Message Message, String Name, String Value, String Type)
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 99
super ();
this.Elements= Elements; this .Message= Message ; this.Name= Name; this .Value= Value ; this . Type= Type;
public class Element
public Field[] Fields= null; public Integer Index;
public Element()
public Elernent(Field[] Fields, Integer Index )
super() ;
this . Fields= Fields; this.Index= Index;
11.2 Retrieving From-Mobile Messages
The following code snippet uses JSON REST web service interface to retrieve from-mobile (return-link) messages and map them to objects of classes defined in the previous section.
import java.io. BufferedReader; import java . io.InputStrearnReader; import java.net.URI;
import org.apache.http.HttpResponse; import org.apache.http.client . HttpClient;
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
100
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
import org . apache.http . client . methods . HttpGet ; import org . apache.http.impl.client . HttpClientBuilder;
import com.fasterxrnl.jackson.databind.ObjectMapper;
import restclient.GetForwardStatusesResult; import restclient.GetReturnMessagesResult;
public class IGWSRestClient
final static String gwHost = "isatdatapro.swlab.ca" ; final static int gwPort = 8143 ; final static String gwRestBasePath "/GLGW/2/RestMessages . svc/JSON/";
final static String myAccessID "70000934 "; final static String myPassword "password";
public void JsonigwsClientSample_GetReturnMessages()
try
String authentication= "access_id=" + myAccessID +"&password="+ myPassword; String highWatermark = "&start_utc=2016-10-21 14:45:00&include_raw_payload=true"; String opName = "get_return_messages/";
URI getFwStatusesURI = new URI("https", null, gwHost, gwPort, gwRestBasePath+opName, authentication+highWatermark, null);
HttpClient client= HttpClientBuilder.create() . build() ; HttpGet request= new HttpGet(getFwStatusesURI);
HttpResponse response= client.execute(request); BufferedReader rd= new BufferedReader (new
InputStreamReader(response . getEntity() .getContent() )) ; String inputStr; StringBuilder responseStrBuilder new StringBuilder() ;
while ( ( inputstr = rd . readLine ()) != null) responseStrBuilder.append (inputStr) ;
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 101
// Object mapper instance ObjectMapper mapper= new ObjectMapper();
// Convert JSON to a Java object String json = responseStrBuilder.toString() ;
GetReturnMessagesResult restResponse  mapper.readValue(json,
GetReturnMessagesResult.class);
if(restResponse  ! =  null)

// Handle the response . ..
catch(Exception ex) { System.out.println(ex);
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 102


APPENDIX A TUTORIAL -SOAP BASED WEB SERVICE
A.1 Getting Started
�
Contact Customer Support to obtain the client service access ID and password, unless you already have them.

For all web service operations, users need to supply their access ID and a password. The lsatData Pro Gateway Web Service 2 is a stateless service -no user state is maintained between two web service calls.

�
Obtain the web service's WSDL file.


If the URL received from Customer Support is
https://isatdatapro.orbcomm .com/GLGW/2/Messages.svc
use
https://isatdatapro.orbcom m .com/GLGW/2/Messa ges.svc?wsdI or
https:/ /isatdatapro.orbcom m .com/ GLGW/2/Messa ges.svc?sin g leWsdI to access the WSDL file. This file allows the software development tools to create proxy classes used to access the web service.

A.2 Required Materials
For illustration purposes only, this tutorial uses the materials and equipment listed below that you require to work through the examples. There are other software tools you can use to achieve the same results.
�
Activated lsatData Pro terminals

�
Computer with Microsoft Windows XP� SP2, Windows Vista�, or Windows� 7 installed

�
Internet connectivity

�
Microsoft� .NET Framework version 4.5 or higher (support.microsoft.com)

�
Microsoft� Visual Studio�


A.3 Create and Configure a New Project
Note: Visual Studio� is a Microsoft product therefore, some aspects of the user interface may change in future product releases. The screen shots in this document may not match the appearance of the Visual Studio desktop of the release you are using. Only the basic steps required for this tutorial are described in this document. Please refer to the Microsoft website for documentation and troubleshooting on all Microsoft products.
Before using IGWS 2, you need to create a project workspace.
1.
Open Visual Studio from your computer to create a new Visual Studio console application project (Figure 16).

2.
Name your project 'TestSamples", and then click OK.


, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
103
Figure 16: New Visual Studio Project
,...ir"""'-t,,i,es,. _-_____]-~--~_______________.. --=-�
~ _ _�� m
Bu,aness; ~EZ-PrGJ�?S
'tlolllia!il:
-"dsusc-= !Ire eMNll ~.O
-
--,�
'St,eirl:er-K.~
=�
Vaut/C.,.....
�'""'""=�
!<!h.OOoai..,.o,.,..,t
~ ,...is......~
W.iil Sfulli<i to:itlltd tffli.Pfi;lt

1 ~Lb-s-y
T
WebCoolrdllb--�� ~ :icrPra:;fiI
.C1�111 2't<l:n i., Mi\,(,Oft .-ooSo\!U,Co'1~


3.
Select Add Service Reference from the Solution's Context menu to add the lsatData Pro Gateway Web Service 2 (IGWS 2) as a web reference to your project.

4.
Click Advanced (Figure 17). The Service Reference Settings window appears.


Figure 17: Add a Service Reference
' Add Service Reference ~~

c=p.,,,:,,.,
ISl!Vl;iR.~I
(r Aa,��� ] ]
5. Click Add Web Reference (Figure 18).

, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 104
Figure 18: Service Reference Settings
Service Reference Settings 0~
dient Access level for generated Qasses:
I� vi
D ~enerate asynchronous operations Dat;Type D Always generate message contracts
Co[lection type: lsvstem.Array
Q.lctionary collection type: ISystem.Collections. Generic, Dictionary
~ 8:_euse types in referenced assemblies
@ Reuse types in g_ll referenced assemblies
0 Reuse types in ~edfied referenced assemblies:
D .Omscarlib D .OSystem D Sy stem. Core D .OSystem.Data D .OSystem.Da ta.Dat;SetExtensians D .OSystem.Xml
Compabbility
Add a Web Reference instead of a Service Reference. This will generate code based on .NET Framework 2.0 Web Services technology.
( I Add \'leb Reference.. I )
___oK_ _.1I Cancel

6. Type the URL of the WSDL file you saved to your disk earlier or the URL of the website (Figure 19).
Figure 19: Enter the URL

o �I� c:,
!..ft1 I~c:ffat".jna.;111.dc)~ r.�u :m,�Ul Ci'o'll'fl/~ 1~ .sc.1u.=41i.',,.:l
c7i,;ml \o~rslon ..'"LQ' en�<ln:..�urF�S"?>�
-.-w~,JI �Qcll ril Gr-'S ;,.rr -"'JO,. ~~-= "fi\\p;/ / , ,;;h-1nt1!1,;a ndwt1p,l?"!J / vP0/ 1D!M/(ll_il/,�1hf xWr:'!I; 111'1.a,-.�= ' h-1111�f / www.w3.oro f .l"OOG-/o;:;/-eddres:Rf!OJ/ws�~ xir1"'5; t�~-!.Ci = �ttt�r�/ /w111-w ,w:J,,QrlJ / 7'(10:; /O:RJ41rfd~1J�
x1rin:11;jr, ,..�14.w~� )111<1!1:o: ,;Q,;iptiml � �t,up~//'-lw 11e1a ...i.. .............<>r!J/,_u..,p/"ln�1..6di:m



L__J
~"' .,~: ,11.ap u -, ,up:/ /r.ciloC:IUll~.lMIIW!olp ,Mq{ ~:5ill/:S->llP,1.l (' ;,,;,1:11n<a:101'-',o� "h11"://du~ .....,.;.,r., o~o.<ir9/wff1200.:1/l)l /<i.:i~i,i;-200,r1u-nu-~~~rr,�utmtv-L0.11:5.r
�orin~; ,,,.,p.:' t:'itt�,;/ I 5'Cll~IU,'Mffll::s,:.np.l)r111wsdl/st1~11, ' ~,r:11'1: .-,:l:'ht! 1�:J/ www,w~.(INJJ'll)O~ / x1-1u;d~"""~.,� :i11T'tn.~: "'~=�1,u": / /-s<Mmns.xn�1s.o11'-".ot1J/W:5J 201:>4/09/'-"�'' Mj&,:laicrM.C"

)Cr."" n, : m~: -httf1�//y,;'1,ori1~s. !f1'l,;; rl) 50,(f.-�11�/W.f/2"l}O:,,O/llJ '-'II x1nl11'1: 111uJ)c ~l,rtp:/ /f,,d11t111,1 ...Z 11 ""�"P�llr!J/ W'ij :1rJ04/ IIJJ/a-ih .111ttJni.: �'--� 'tm~:J /i.chAiililiZiJ..;uiilUiirrp.i).tyb�~,, lOM /ti?/n110 )lfflll1:Si: n'-i?'t� "Imp:/JiY.WW.W:l.or g/2-001 /OSJ.aikln::"i-i"l(J/111<! ,mu1:k ..a.JS � lHJt:/ /1oclw11~nt,.x)11k&ro1p.Jli,f!)/ ~-.~ail/ " t._r~h�m<t~�i��t�aws-tl.11mia .~c.zit a.w'-Oy-l.111:.uf-l'llc-11�>
-<-:Yi~ :Polllcy WJU [d-.'JGWS_pollcy'>�-c:w~:.~:.-=:t;'?ne:>
<:
7.
Click Go to add a web reference name (Figure 19).

8.
Type "IGWS 2" (or the reference name you used above), this is the web reference name used in this tutorial (Figure 19), and then click Add Reference.


Visual Studio creates all the necessary files and adds them to your project.

, JI:.\
N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
V ms
Figure 20: IGWS 2 Sample Code Solution Explorer -IGWS Samples T S,.. X

[;] Solution 'IGWSSamples' (1 project) a--�
B IGWS Samples

Properties References Service References
?
!,,,,,, �� i ,:::~:: _rnterface, wsdl t� 00 Messages, xsd GJ�� -Reference.map �� C.J bin , .. CJ obJ [j} app. config ����� ~ Program. cs
A Web reference is a generated proxy class that locally represents the exposed functionality of an XML web service. The proxy class defines methods that represent the actual methods exposed by an XML web service. When the client application creates an instance of the proxy class, the application can call the XML web service methods as if the XML web service were a locally available component.
Code samples can now be added and complied. Refer to APPENDIX H for code description details.

, JI:.\
N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
106
APPENDIX B COMMON IGWS ERROR CODES
The following table lists common IGWS 2 error codes. For a complete list of IGWS 2 error codes use the web service operation IGWSlnformation (refer to section 4.2. 1 ).
Name  ID  Description
ERR_INVALID_MESSAGE....CONTENT  3  Customer has submitted an invalid message.
ERR_MT_SN_MISSING  4  Terminal serial number is missing from the message. The Gateway does not know where to send the message.
ERR_INVALID_MESSAGE....ID  14  A customer has specified an invalid message ID or required message IDs are missing. This error could happen if the requested message is too old and is no longer in our system.
ERR_CUSTOMER_DELAYED  16  Customer is accessing the web service too often. For every customer account, there is a limit in number of GET and SEND (1 by default) web service accesses for a unit of time (10 seconds by default). For example, if a customer tries to query messages more than once in a 10 second interval, web service responds with this error code.
ERR_INVALID_INPUT_PARAMETER_TIMESTAMP_FORMAT  17  A time stamp parameter of a web service operation is not in a correct form.
ERR_GATEWAY_NOT_READY  20  Gateway web service is currently not in an operational state.
ERR_INVALID_INPUT_DATA  23  One of the web service parameters is not correct (for example �array of message IDs is empty when calling GetFWMessages web service operation)
ERR_INVALID_CUSTOMER_GW_VAR_ID  40  This error happens only if the terminal is not provisioned correctly on the Gateway.
ERR_INVALID_MT_SN_LENGTH  50  Terminal serial number is invalid (wrong length)
ERR_UNAUTHORIZED_FOR_THIS_OPERATION  104  Customer account is not authorized for the web service operation. For example, a customer has not been provisioned as a super account, but they tried to send a message as if they were.
ERR_UNABLE....TO_CANCEL_THE....MESSAGE  115  Web service was not able to cancel a to-mobile message.
ERR_INVALID_MESSAGE....XML_CONTENT  116  Format of a common message is invalid or cannot be encoded. This error also happens if the customer hasn't uploaded their custom message definition through the Versa Admin provisioning site.
ERR_INTERNALEXCEPTION  128  Internal Gateway error �please report to customer support.
ERR_INVALID_ TERMINALID_NO_SUCH_ TERMINAL  513  Gateway was unable to find information related to the specified terminal. Invalid mobile ID specified or a provisioning issue.
ERR_INVALID_ TERMINALID_NOT_ YOUR_TERMINAL  514  The specified terminal does not belong to a Gateway account trying to use it.

, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 101
Name  ID  Description
ERR_TERMINALNOT_REGISTERED  516  The terminal has not been registered yet. Gateway is unable to send the message to it.
ERR_INVALID_BROADCAST_ID_NO_SUCH_ID  12310  A customer has specified an invalid broadcast ID.
ERR_TERMINAUS_DISABLED  12311  Specified terminal was disabled. Messages cannot be submitted to it.
ERR_BROADCAST_ID_IS_DISABLED  12312  Specified broadcast ID was disabled. Messages cannot be broadcast to it.
ERR_MESSAGE_ACK_ERROR_CON NECTION_LOSS  17686  The to-mobile message has closed due to connection loss.
ERR_AUTH ENTICATION_ERROR  21785  Customer authentication failed (invalid credentials or customer not provisioned).
ERR_INVALID_WS_PARAMETER  21786  One of parameters used in the web service operation call is not valid.
ERR_INVALID_BROADCAST_ID_NOT_YOUR_ID  21793  The specified broadcast ID does not belong to the Gateway account trying to use it.
ERR_RESTRICTED_MESSAGE  21794  Customer is restricted from sending messages of this type.
ERR_REGULAR_MESSAGE_SIZE_QUEUE_FULL  21795  Message queue for regular sized (less than 2000 bytes) messages for the specified terminal is full.
ERR_LARGE_MESSAGE_SIZE_QUEUE_FULL  21796  Message queue for large sized (more than 2000 bytes) messages for the specified terminal is full.
ERR_LOW_POWER_MODE_MESSAGE_TOO_LONG  21797  Message for a low power mode terminal is too long (more than 5000 bytes).

To-Mobile Message Failure Error Codes
The following error codes relate to to-mobile message states when the message failed to be delivered.
Name  ID  Description
ERR_NDN_INVALID_BEAM  12308  To-mobile message failed to be delivered to the terminal. Reason: Invalid beam number.
ERR_N DN_TIMED_OUT  12309  To-mobile message failed to be delivered to the terminal. Reason: Message timed out.
ERR_N DN_INVALID_PRIORITY  21791  To-mobile message failed to be delivered to the terminal. Reason: Invalid priority.
ERR_NDN_FAILED_CURRENT_BEAM_UPDATE  21787  To-mobile message failed to be delivered to the terminal. Reason: Failed to update the current beam number.
ERR_MESSAGE_TOO_LONG  17678  To-mobile message failed to be delivered to the terminal. Reason: Message is too big.

, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
V ms
Name  ID  Description
ERR_N DN_TOO_MANY_MESSAGES  21788  To-mobile message failed to be delivered to the terminal. Reason: Too many messages.
ERR_NDN_INITIAL_SYSTEM_STATE  21789  To-mobile message failed to be delivered to the terminal. Reason: Initial system state.
ERR_NDN_TERMINAL_WAS_RESET  21792  To-mobile message failed to be delivered to the terminal. Reason: Terminal was reset.
ERR_N DN_MAX_RETRY_EXHAUSTED  21809  To-mobile message failed to be delivered to the terminal. Reason: Maximum retry/overflow of first packet of low-power messages exhausted.
ERR_N DN_INVALID_MODEM_WI  21810  To-mobile message failed to be delivered to the terminal. Reason: Invalid modem wake-up interval
ERR_NDN_FAILED_TO_LOAD  21811  Failed to load the message from the database.
ERR_NDN_TIMEOUT_NO_CHANCE....TO_TRANSMIT  21812  Message timeout-never had chance to be transmitted.
ERR_N DN_TIMEOUT_SOME....ATTEMPTS_TO_TRANSMIT  21813  Message timeout-some attempts made but never received modem's ACK, and later had no chance to be transmitted.
ERR_N DN_TIMEOUT_SOME....ATTEMPTS_TO_TRANSMIT_ACKED  21814  Message timeout-some successful attempts made, modem's ACK received, but later no chance to be transmitted.
ERR_NDN_TERMINAL_RESET_NO_CHANCE....TO_TRANSMIT  21815  Terminal was reset-never had chance to be transmitted.
ERR_NDN_TERMINAL_RESET_SOME....ATTEMPTS_TO_TRANSMIT  21816  Terminal was reset-some attempts made but never received modem's ACK.
ERR_UNRESPONSIVE....TERMINAL_QUEUE....LEVEL_REACHED  21830  Maximum number of queued messages for an unresponsive terminal reached. If an lsatData Pro modem becomes unresponsive and does not acknowledge 2 (by default) consecutive to-mobile messages, the system will dynamically reduce the maximum number of outstanding to-mobile message limit, as per section 4.3, to a smaller value. When the new limit is reached, a new to-mobile message for that modem will be rejected and this error code will be returned immediately. As soon as one to-mobile message gets acknowledged again, message throttling to that terminal will stop and the usual queue length restriction, takes effect again.

, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 109

APPENDIX C INTERFACE TEST SYSTEM
Overview
ORBCOMM provides test portals corresponding to all the major traffic and administrative enterprise to enterprise (e2e) interfaces.
This section outlines the necessary connection parameters for the IGWS 2.
ORBCOMM's intent is that this test interface is always available for your back-office development testing, and ORBCOMM endeavors to roll out new network interface software on this portal one month prior to roll out on the associated network servers.
IGWS2
Access ID:  70000934
Password:  password
GET/SEND web service call frequency limits:  0 -unlimited
Mobile ID:  01097623SKY2C68
External URLs:  httes:/ /i satdataero.swl ab.ca: 8143/GLGW/2/Messages. svc

All messages sent to the terminal are immediately acknowledged by a mobile simulator.
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE


APPENDIX D SAMPLE SOAP WEB SERVICE CLIENT APPLICATION CODE INC#
using System; using System . Collections.Generic; using System . Ling; using System.Text ; using System . Threading . Tasks; using System . Net; using System . Net . Security; using Systern . Security . Cryptography .X 509Certificates; using IDPClient . IGWS; narnespace IDPClient.DocumentationSarnples
class IDPGatewayClient
private static IGWS . Gatewayinterface igwssvc ; private static String rnyAccessID; private static String myPassword; private static int pollingintervalinSeconds 30; private void initWSAcecss ()
II Create an instance of the web service proxy class igwsSvc = new Gatewayinterface(); II Set the web service URL igwsSvc.Url = "https://isatdatapro.orbcomm.comlGLGWl21Messages .svc"; II Set the time the Web service client waits for a synchronous II XML Web service request to complete (in milliseconds) . igwssvc . Timeout = 30 * 1000; II Set it to 30 seconds for this sample II Set the access ID and password that has been assigned to the client myAccessID "70000010 " ;
myPassword " AX0B975JHD";
ServicePointManager . SecurityProtocol SecurityProtocolType.Tls SecurityProtocolType . Tlsll SecurityProtocolType . Tlsl2 SecurityProtocolType . Ssl3;
I I I <summary> Ill wsErrorCodes dictionary can be used to get the name and description of Ill errors received from the Gateway . The next code snippet shows how to use it .
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 111
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
Ill </summary> private static Dictionary<int, Errorinfo> wsErrorCodes = new Dictionary<int, Errorlnfo>() ;
I I I <summary>
/// igwsUTC will contain current Gateway UTC time . We can use that as a starting Ill high-watermark for message polling Ill </summary> private static String igwsUTC ;
I I I <summary> I ll Dictionary of all subaccounts associated to account 70000010 I I I </summary> private static Dictionary<String, Subaccountlnfo> mySubaccounts =
new Dictionary<string, Subaccountinfo>();
I I I <summary> Ill Dictionary of all terminals associated to account 70000010 Ill </summary> private static Dictionary<String, Terminalinfo> myTerrninals =
new Dictionary<string, Terminalinfo>() ; private void getIGWSinformation()
try
II --Get basic IGWS information
IGWSinforrnationResponse igwsinforrnation = igwsSvc . IGWSinforrnation ( accessID : rnyAccessID, password: rnyPassword, getErrorCodes : true) ;
if (igwsinforrnation != null && igwsinformation.ErrorID == 0)
igwsUTC = igwsinforrnation . UTC; if (igwsinformation.ErrorCodes != null)
foreach (Errorinfo errorinfo in igwsinformation . ErrorCodes) wsErrorCodes.Add(errorinfo.ID, errorinfo) ;
II --Get a lis t of subaccounts from the IGWS GetSubaccountinfoResult subaccountResult = igwssvc . GetSubaccountinfos (
accessID : rnyAccessID, password: rnyPassword); II Store subaccounts to a dictionary if (subaccountResult != null &&
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
112
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
subaccountResult . ErrorID == 0 && subaccountResult . Subaccounts != null && subaccountResult . Subaccounts.Length > 0
II --Add subaccounts to the mySubaccounts dictionary foreach (Subaccountlnfo subAccountinfo in subaccountResult.Subaccounts) mySubaccounts .Add(subAccountinfo.AccountID, subAccountinfo) ;
else if (subaccountResult != null && subaccountResult . ErrorID > 0)
igwsErrorHandler (subaccountResult. ErrorID, "GetSubaccountinfos");
II Get a list of terminals from the IGWS. Retrieve up to pageSize (500) per call. // If the client account contains more than <pageSize> terminals, you will have // to call the GetTerminlsinfo multiple times . bool terminalRetrievalCompleted = false ; String startID = do
GetTerminalsinfoResult terminalsinfo = igwssvc . GetTerminalsinfo( accessID: myAccessID, password: myPassword, subaccountID : null, sinceID: startID, pageSize: 500);
if (terminalsinfo != null && terminalsinfo . ErrorID O && terminalsinfo.Terminals != null && terminalslnfo . Terminals . Length > 0)
II --Add terminals to the myTerminals dictionary foreach (Terminalinfo mtinfo in terminalsinfo.Terminals)
myTerminals .Add(mtinfo.PrimeID, mtlnfo) ; II Nex t call should retrieve next page of 500 terminals II Take the PrimeID of the last received terminal and pass it as a II sinceID parameter of the next GetTerminalsinfo call. startID = terminalslnfo . Terminals.Last() .PrimeID;
else terminalRetrievalCompleted = true; if (terminalslnfo != null && terminalsinfo.ErrorID > 0)
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
113
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
igwsErrorHandler (terminalsInfo. ErrorID, "GetTerminals Info") ;
while ( ! terrninalRetrievalCornpleted) ;
catch (Exception ex )
Console .WriteLine($"getIGWSinforrnation exception: {ex .Message}");
private Task pollingTask = null; private static System . Threading . CancellationToken pollingCancellationToken; private static System . Threading . CancellationTokensource pollingTaskTokenSource; private void igwsPolling()
pollingTaskTokenSource = new System . Threading.CancellationTokenSource(); pollingCancellationToken = pollingTaskTokensource.Token; pollingTask = Task.Factory.StartNew(() => {
Console.WriteLine($"Polling started") ; II --Set initial high-water marks for forward statuses and return-link messages String startReUTC = igwsUTC; String startFwStatusUTC = igwsUTC; bool moreToDo = true; while (moreToDo)
try
II --Get new return-link messages
GetReturnMessagesResult reMessageResponse = igwsSvc.GetReturnMessages( accessID: myAccessID, password : myPassword, filter : new ReturnMessageFilter()
StartUTC startReUTC
});
if (reMessageResponse != null && reMessageResponse . ErrorID O && reMessageResponse .Messages != null && reMessageResponse .Messages.Length > 0)
II --Get the next StartUTC, but only if Messages array is not empty
startReUTC = reMessageResponse .NextStartUTC; II Process received return-link messages processReMessages(reMessageArray: reMessageResponse .Messages) ;
else
ii Check if the call failed with an error if (reMessageResponse != null && reMessageResponse.ErrorID > 0)
// Log the error (reMessageResponse.ErrorID) igwsErrorHandler (reMessageResponse . ErrorID, "GetReturnMessages") ;
II --Get new forward message status changes
GetForwardStatusesResult fwStatusesResponse = igwssvc.GetForwardStatuses( accessID: myAccessID, password : myPassword, filter: new ForwardStatusFilter()
StartUTC startFwStatusUTC
}) ;
if (fwStatusesResponse != null && fwStatusesResponse.ErrorID O && fwStatusesResponse.Statuses != null && fwStatusesResponse.Statuses . Length > 0)
II --Get the next StartUTC, but only if Statuses array is not empty startFwStatusUTC = fwStatusesResponse.NextStartUTC; II Process received statuses processForwardStatuses(statusArray: fwStatusesResponse . Statuses) ;
else
II Check if the call failed with an error if (fwStatusesResponse != null && fwStatusesResponse.ErrorID > OJ
II Log the error (fwStatusesResponse . ErrorID) igwsErrorHandler (fwStatusesResponse . ErrorID, "GetForwardStatuses");
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
catch (Exception ex)
// Handle the exception
Console.WriteLine($"startPolling exception : {ex.Message}");
if (pollingCancellationToken.IsCancellationRequested)
Console . WriteLine($"Polling task cancelled'' );
return;
// Enforce call frequency limits, wait for pollingintervalinSeconds seconds
// before polling again
Task.Delay(pollingintervalinSeconds * 1000) . Wait{);
}, pollingCancellationToken);
I I I <summary>
Ill Processing of received forward message status changes
I I I <Isummary>
Ill <param name="statusArray"></param>
private void processForwardStatuses(ForwardStatus[] statusArray)
foreach {ForwardStatus st in statusArray)
Console.WriteLine($"Status of message (st.ForwardMessageID} changed to {st.State}");
I I I <summary> Ill Processing of received return-link messages Ill </summary> Ill <param name="reMessageArray" ><lparam> private void processReMessages(ReturnMessage[] reMessageArray)
foreach (ReturnMessage reMessage in reMessageArray)
Console . WriteLine($"Received message {reMessage . ID}"l ;
I I I <summary> Ill Logs error messages on the console
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 116
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
Ill </summary> Ill <param narne=" errorCode " ></pararn> Ill <param name= " caller" ></param> private void igwsErrorHandler(int errorCode, String caller)
try
Console . WriteLine( "Error calling {3}: [{0}]: {1} -{2} ", errorCode, wsErrorCodes[errorCode] .Name, wsErrorCodes[errorCode] .Description, caller);
catch (Exception e x )
Console.WriteLine($ "Logging ex ception: {ex.Message} '');
public void SubrnitModemMesssagesSarnple()
II Create array of ForwardMessage objects ForwardMessage[] messages= new ForwardMessage[2] ;
II Message 1 --------------------------------�// A simple binary message (reset -see [T203] for more details) messages[O] = new Forward.Message(); messages [0] . DestinationID "00300050SKY1A97 "; messages [ OJ . UserMessageID 1; mes sages [O] .RawPayload = new byte[] { Ox OO, Ox44, Ox OO };
II Message 2 --------------------------------�II A simple customer s pecific message in a binary format . In case a customer defined II a message where SIN=l28 and a content of 8 bytes, this would be a way to send
II it in a binary form . The first byte is SIN and the rest is its content . messages[l] = new Forward.Message(); messages [l] . DestinationID "00300050SKY1A97 ";
messages [1] . UserMessageID  2;
mes sages [l] . RawPayload  = new  b yte[]  OxBO ,  Ox Ol ,  Ox 02 ,  Ox 03 ,  Ox 04 ,
Ox05 ,  Ox 06 ,  Ox 07,  Ox OB};

II Submit messages and check Gateway ' s response SubmitMessagesResult submitResult = igwssvc . SubmitForward.Messages( accessID: myAccessID, password : myPassword,
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
messages : messages) ;
if (submitResult != null && submitResult . ErrorID == 0 && submitResult.Submissions != null)
foreach (ForwardSubmission submissioninfo in submitResult.Submissions)
if (submissioninfo.ErrorID 0)
Console.WriteLine("Message (User message ID={O}) accepted, Assigned ID : {l} '' , submissioninfo.UserMessageID, submissioninfo.ForwardMessageID);
else
Console.WriteLine("Message (User message ID={O}) rejected : [{1}]: {2} -{3} " ,
submissioninfo.UserMessageID, subrnissioninfo.ErrorID, wsErrorCodes[submissioninfo.ErrorID] .Name, wsErrorCodes[subrnissioninfo.ErrorID] . Description) ;
else if (submitResult != null && subrnitResult . ErrorID > 0)
Console.WriteLine("Error calling SubmitForwardMessages: [{0}] : {1} -{2}", submitResult .ErrorID, wsErrorCodes[submitResult . ErrorID] . Name , wsErrorCodes[submitResult . ErrorID] .Description);
public void SubmitTerminalMesssagesSample()
II Create array of ForwardMessage objects ForwardMessage[] messages= new ForwardMessage[3] ; II Message 1 --------------------------------�
11 A simple binary message (reset -see [T203] for more details) messages[O] = new Forward.Message(); messages[O] .DestinationID "00300050SKY1A97"; messages[O] . UserMessageID 1;
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 11s
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
messages[O] . RawPayload = new byte[] { OxOO , Ox44 , Ox OO }; // Message 2 --------------------------------�// A simple customer specific message in a binary format . In case a customer defined II a message where SIN 128 , MIN= 1, and a content of bytes, this would be ii a way to send it in a binary form. The first byte is SIN, the second byte is MIN, // and the rest is its content. messages[!] = new Forward.Message() ; messages [1] . DestinationID "00300050SKY1A97 ";
messages [ 1] . UserMessageID  2;
messages[!] . RawPayload  = new byte[]  0xB0 ,  0x 0l,  0x 0l,  0x02 ,  0x03 ,
0x 04,  0x 0S,  0 x 06,  0x07,  0x 0B};

ii Message 3 --------------------------------�// The reset message using common message format . // Payload fields in the e xample below do not apply to the modem . // Use the RawPayload only. messages[2] = new Forward.Message() ; messages[2] .DestinationID "00300051SKY1A97 " ; messages[2] . UserMessageID 3 ; messages[2] .Payload= new Message ( ) ; messages[2] . Payload . SIN 0 ; messages[2] . Payload .MIN Ox44 ; messages[2] . Payload . Fields= new Field[l] ; messages [2] . Payload. Fields [ O] = new Field () ; messages [2] . Payload . Fields [0] .Name = " resetType" ; messages [2] . Payload. Fields [ O] . Value = "ModemPreserve"; // Submit messages and check Gateway ' s response SubmitMessagesResult submitResult = igwssvc.SubmitForward.Messages( accessID : myAccessID, password : myPassword, messages : messages) ; if (submitResult != null && submitResult.ErrorID == O && submitResult . Submissions != null)
foreach (ForwardSubmission submissioninfo in submitResult.Submissions)
if (submissioninfo.ErrorID 0)
Console .WriteLine( ''Message (UserID={O}) accepted, Gateway assigned ID : {1} '', submissioninfo.UserMessageID, submissioninfo.ForwardMessageID);
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
else
Console . WriteLine{ " Gateway rejected a message (UserID={O}) : [{1}]: {2} -{3} " , submissioninfo.UserMessageID, subrnissioninfo.ErrorID, wsErrorCodes[submissioninfo . ErrorID] .Name, wsErrorCodes[submissioninfo . ErrorID] .Description) ;
else if (subrnitResult != null)
Console .WriteLine( "Error calling SubmitForwardMessages: [{0}] : {1} -{2}" , subrnitResult . ErrorID, wsErrorCodes[submitResult . ErrorID] .Name, wsErrorCodes[submitResult.ErrorID] .Description);
I I I <summary>
/// Stops message polling Ill </summary> private void stopPolling()
pollingTaskTokensource . Cancel(); try
pollingTask.Wait() ;
catch (AggregateException el
foreach (var v in e . InnerExceptions) Console.WriteLine(e.Message + + v.Message) ;
11 11
finally
pollingTaskTokenSource.Dispose();
#region Public interface
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 120
public void !nit()
initWSAcecss(); getIGWSinformation();
public void StartPolling()
igwsPolling();
public void StopPolling()
stopPolling();
#endregion
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
APPENDIX E SAMPLE REST WEB SERVICE CLIENT IN C#
using System; using System . Net.Http; using System.Net.Http . Headers; namespace IDPRESTClient . DocumentationSamples
public class IDPGatewayRestClient
private const string URL= "https://isatdatapro . swlab.ca:8143/GLGW/2/RestMessages.svc/JSON/get_return_messages/ " ; private canst string urlParameters = "?access_id=70000934&password=password&start_utc=2016-10-21 14 : 45:00" ; static String gwHost = '' isatdatapro.swlab.ca'' ; static int gwPort = 8143; static String gwRestBasePath = '' /GLGW/2/RestMessages.svc/JSON/"; static String gwRestBaseURL = "https://isatdatapro.swlab.ca:8143/GLGW/2/RestMessages.svc/JSON/"; static String myAccessID "70000934 " ; static String myPassword "password" ; public void JsonigwsClientSample_GetReturnMessages(bool compression=false)
String wsoperation = "get_return_messages " ; String startUTC = "2016-10-21 14:45:00''; HttpClient client= new HttpClient(); client.BaseAddress = new Uri($ " {gwRestBaseURL}{wsOperation}"); string urlParameters = $" ?access 1d={myAccessID}&password={myPassword}&start utc={startUTC} " ; client.DefaultRequestHeaders .Accept .Add(new MediaTypeWithQualityHeaderValue("application/json")) ;
// Set this to prevent 'The maximum message size quota for incoming // messages (65536) has been exceeded' exceptions client .MaxResponseContentBufferSize = int .MaxValue;
HttpResponseMessage response= client.GetAsync(urlParameters) .Result; if (response . IsSuccessStatusCode)
// Parse the response body . var responseObject = response . Content . Read.AsAsync<GetReturnMessagesResult>() . Result; if (responseObject != null)
// Handle the response ...
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 122
public class GetReturnMessagesResult
public int ErrorID { get; set; } = O; public String NextStartUTC { get; set; } = 1111 ;
public ReturnMessage [] Messages { get ; set ; } = null;
public class ReturnMessage
public ulong ID { get; set; } = 0; public String MessageUTC get; set; public String ReceiveUTC get; set; public int SIN { get; set; } = O; public String MobileID { get; set; } = public System.Byte[] RawPayload { get; set; } = null; public CommonMessage Payload { get; set; } = null; public String RegionName { get; set; } public int? OTAMessageSize { get; set; = null; public int? CustomerID { get; set; null ; public int Transport { get; set; } 0;
public partial class Com.monMessage
public Field[] Fields { get; set; ) = null; public string Name { get; set; ) = public int SIN get; set; 0; public int MIN get; set; O; public string IsForward { get; set; ""�
public partial class Field
public Element[] Elements { get; set; } = null; public CommonMessage Message { get; set; } = null; public string Name { get; set ; } = 1111 ; public string Value { get; set; } = "" ; public string Type { get; set ; } =
public partial class Element
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 123
public Field[] Fields { get; set; } = null; public int Index { get ; set; } = -1;
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
124

APPENDIX F SAMPLE SOAP WEB SERVICE CLIENT APPLICATION IN JAVA
File: IDPGatewayClient.java
import java.util.HashMap; import java . util.Lis t ;
import java.util.Map;
import javax . xml.ws.BindingProvider; import javax.xml.namespace . QName;
import java . math.Biglnteger;
import java.net.URL; import java.util.concurrent. * ;
import igws . * ;
public class IDPGatewayClient
final static String gwURL = "https://isatdatapro.swlab.ca:8143/GLGW/2/Messages.svc";
final static String gwQue="IGWS " ; final static String gwinterface='' Gatewayinterface'';
final static String rnyAccessID "70000934 ";
final static String myPassword "password";
final static String mobileID = " 01097623SKY2C68 11 ;
final static int pollingintervalinSeconds 30 ; II poll the IGWS once every 30 seconds
!Messages igwsSvc ;
II igwsUTC will contain current Gateway UTC time . We can use that as a starting II high-watermark for message polling private static String igwsUTC ;
II wsErrorCodes dictionary can be used to get the name and description of II errors received from the Gateway. The next code snippet shows how to use it. HashMap<Integer, Errorlnfo> wsErrorCodes = new HashMap<Integer, Errorlnfo>();
II Dictionary of all subaccounts associated to account <accessID> HashMap<String, Subaccountinfo> mySubaccounts = new HashMap<String, Subaccountinfo>();
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 12s
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
// Dictionary of all terminals associated to account <accessID> HashMap<String, Terminallnfo> myTerminals = new HashMap<String, Terminallnfo>() ;
public void Init()
initWSAcecss(); getIGWSinformation();
public void StartPolling{)
igwsPolling();
public void StopPolling()
stopPolling();
private void initWSAcecss()
try
Gatewayinterface service= new Gatewayinterface(new URL(gwURL), new QName(gwQue, gwinterface) ) ; igwsSvc = service.getIGWS();
// Set connection and request timeouts Map<String, Object> ctxt = ((BindingProvider) igwsSvc) .getRequestContext();
int timeout 30 * 1000; II Set it to 30 seconds for this sample
ctxt.put("com.sun.xml.ws.developer.JAXWSProperties.CONNECT_TIMEOUT", timeout); ctx t.put( '' com . sun .xml .ws. connect . timeout '', timeout) ; ctxt .put("com.sun.xml.ws.internal.connect.timeout", timeout); ctxt.put(''com.sun.xml.ws.request.timeout'', timeout) ; ctxt.put("com.sun.xml.internal.ws .request.timeout", timeout);
catch (Exception e)
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
System .out .println(e);
private void getIGWSinformation()
try
II --Get basic IGWS information IGWSinformationResponse2 igwsinforrnation = igwsSvc.igwsinforrnation(myAccessID, myPassword, true); if(igwsinformation != null && igwsinformation.getErrorID{) == 0)
igwsUTC = igwsinformation . getUTC() ; System.out.println("Connected to IDP Gateway web service version " + igwsinformation.getVersion()) ;
if(igwsinformation.getErrorCodes() != null)
List<Errorinfo> errorinfos igwsinformation.getErrorCodes() .getErrorinfo();
for (Errorinfo errorinfo: errorinfos) wsErrorCodes .put(errorinfo .getID(), errorinfo);
else{ Systern.out.println("getIGWSinformation error: "+ igwsinformation.getErrorID() );
II --Get a list of subaccounts from the IGWS GetSubaccountinfoResult subaccountResult = igwsSvc . getSubaccountinfos(myAccessID, myPassword) ; if (subaccountResult != null && subaccountResult . getErrorID() == 0
&& subaccountResult.getSubaccounts() != null)
List<Subaccountinfo> subaccountList subaccountResult. getSubaccounts () . getSubaccountinfo () ;
for (Subaccountinfo subAccountinfo: subaccountList) mySubaccounts . put(subAccountinfo . getAccountID () , subAccountinfo);
II Get a list of terminals from the IGWS . Retrieve up to pageSize (500) per call . II If the client account contains more than <pageSize> terminals, you will have
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 121
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
// to call the GetTerminlsinfo multiple times.
boolean terminalRetrievalCompleted false; String startID = do
GetTerrninalsinfoResult terminalsinfo igwsSvc.getTerminalsinfo( myAccessID, myPassword,
null, startID, 500);
if (terrninalsinfo != null && terminalsinfo . getErrorID() O && terminalsinfo.getTerminals() != null )
II --Add terminals to the myTerminals dictionary List<Terminalinfo> terrninalList = terminalsinfo. getTerminals () . getTerminalinfo () ; if(terminalList . size() > 0)
for (Terrninallnfo mtlnfo: terminalList)
myTerminals.put(mtinfo . getPrimeID(), mtinfo);
II Next call should retrieve next page of 500 terminals . Take the PrimeID of the
// last received terminal and pass it as a sinceID parameter of the next GetTerminalsinfo call. startID = terminalList.get(terminalList.size() -1) .getPrimeID();
else terminalRetrievalCompleted true;
else terminalRetrievalCompleted true;
if (terminalsinfo != null && terminalsinfo . getErrorID() > 0)
igwsErrorHandler(terminalsinfo . getErrorID(), "getTerminalsinfo'' );
} while (!terminalRetrievalCompleted) ;
catch (Exception e)
System.out.println("IGWS exception: "+ e.getMessage());
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 12s
// Logs error messages on the console private void igwsErrorHandler(int errorCode, String caller)
try
Errorinfo ei = wsErrorCodes.get(errorCode); if(ei != null)
System.out . println("Error calling''+ caller+ ''� '' + errorCode + '' -"+ ei.getName() + '' -"+ ei . getDescription() );
else
Systern . out . println("Error calling '' + caller+ " + errorCode ) ;
catch (Exception ex)
System. out. println ( "Logging exception: " + ex. getMessage () ) ;
private Thread pollingThread null; private void igwsPolling()
Runnable runnable () ->
System.out.println( " IGWS polling started. " ) ;
String startReUTC = igwsUTC ; String startFwStatusUTC = igwsUTC ;
while(!Thread.currentThread() .islnterrupted())
try
startReUTC = retrieveNewReturnLinkMessages(startReUTC); startFwStatusUTC = retrieveNewForwardMessageStatusChanges(startFwStatusUTC);
TimeUnit . SECONDS . sleep(pollingintervalinSeconds);
catch(Exception e)
System.out.println("igwsPolling exception: " + e.getMessage()) ; Thread.currentThread() .interrupt();
System.out.println("IGWS polling completed."); };
pollingThread = new Thread(runnable); pollingThread.start();
// Try to retrieve new messages private String retrieveNewReturnLinkMessages(String startUTC) throws Exception
String nextStartUTC startUTC;
ReturnMessageFilter reFilter = new ReturnMessageFilter(); reFilter . setStartUTC(startUTC);
GetReturnMessagesResult reMessageResponse = igwsSvc.getReturnMessages(myAccessID, myPassword, reFilter); if(reMessageResponse != null && reMessageResponse.getErrorID() == 0 && reMessageResponse . getMessages () != null & & reMessageResponse. getMessages () . getReturnMessage () . size () > O)
II --Get the next StartUTC, but only if Messages array is not empty nextStartUTC = reMessageResponse.getNextStartUTC();
II Process received return-link messages processReMessages(reMessageResponse.getMessages() .getReturnMessage() );
else if(reMessageResponse != null && reMessageResponse . getErrorID() > 0)
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 130
igwsErrorHandler (reMessageResponse. getErrorID () , " getReturnMessages") ;
return nextStartUTC;
// Try to retrieve new messages from the main account and all its subaccounts private String retrieveNewSubaccountsReturnLinkMessages(String startUTC) throws Exception
String nextStartUTC startUTC;
GetReturnMessagesResult reMessageResponse igwsSvc.getSubaccountsReturnMessages(
myAccessID, myPassword, startUTC, false, false); if(reMessageResponse != null && reMessageResponse.getErrorID() == 0)
ii --Get the next StartUTC, even if Messages array is not empty
nextStartUTC = reMessageResponse.getNextStartUTC();
II Process received return-link messages
if(reMessageResponse. getMessages () ! = nul1 &&
reMessageResponse. getMessages () . getReturnMessage () . size () > O)
processReMessages (reMessageResponse. getMessages () . getReturnMessage ()) ;
else if(reMessageResponse ! = null && reMessageResponse.getErrorID() > OJ
igwsErrorHandler (reMessageResponse. getErrorID () , "getSubaccountsReturnMessages");
return nextStartUTC;
II Your message processing function would be implemented here private void processReMessages(List<ReturnMessage> reMessages)
for(ReturnMessage msg: reMessages)
System.out.println( " Received message " + msg.getID()) ;
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
// Try to retrieve new forward message status changes private String retrieveNewForward.MessageStatusChanges(String startUTC) throws Exception
String nextStartUTC startUTC;
ForwardStatusFilter fwFilter = new ForwardStatusFilter(); fwFilter.setStartUTC(startUTC);
GetForwardStatusesResult fwStatusesResponse = igwssvc.getForwardStatuses(myAccessID, myPassword, fwFilter); if(fwStatusesResponse != null && fwStatusesResponse.getErrorID() == 0 && fwStatusesResponse . getStatuses() != null && fwStatusesResponse.getStatuses() .getForwardStatus() .size() > 0)
II --Get the next StartUTC, but only if Statuses array is not empty nextStartUTC = fwStatusesResponse . getNextStartUTC();
// Process received return-link messages processFwMessageStatusChanges(fwStatusesResponse.getStatuses() .getForwardStatus());
else if(fwStatusesResponse != null && fwStatusesResponse.getErrorID() > 0)
igwsErrorHandler(fwStatusesResponse . getErrorID(), "getForwardStatuses");
return nextStartUTC;
II Your message processing function would be implemented here private void processFwMessageStatusChanges(List<ForwardStatus> fwStatuses)
for(ForwardStatus statusChange: fwStatuses) System.out.println( "Status of message " + statusChange . getForward.MessageID() +
11
changed to"+ statusChange.getState()l;
public void SubmitTerminalMesssagesSample() throws Exception
II Create array of Forward.Message objects ArrayOfForwardMessage messages= new ArrayOfForwardMessage();
II Message 1 --------------------------------�
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 132
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
// A simple binary message (reset -see [T203] for more details)
ForwardMessage msg = new Forward.Message(); msg . setDestinationID{rnobileID); msg . setUserMessageID(Biginteger . valueOf(l)) ;
msg.setRawPayload(new byte[] { 0x00, 0x 44 , 0x00 }) ;
messages. getForwardMessage () . add (rnsg) ;
II Message 2 --------------------------------�// A simple customer specific message in a binary format . In case a customer defined II a message where SIN 128 , MIN= 1, and a content of 8 bytes, this would be II a way to send it in a binary form . The first byte is SIN, the second byte is MIN, II and the rest is its content.
msg = new Forward.Message() ; msg . setDestinationID{rnobileID); rnsg . setUserMessageID(Biginteger . valueOf(2)) ; msg . setRawPayload (new byte[] { (byte) Ox BO , OxOl, OxOl, Ox02 , Ox03 , Ox04, OxOS, Ox06, Ox07 , OxOB}); messages. getForwardMessage () . add (msg) ;
II Message 3 II The reset message using common message format. II Payload fields in the example below do not apply to the modem. II Use the RawPayload only .
msg = new ForwardMessage() ; msg.setDestinationID(mobileID); msg . setUserMessageID(Biginteger . valueOf(3)) ;
Message payload= new Message() ; payload.setSIN(O); payload . setMIN(Ox44);
Field [] fields -new Field [2] ; fields[O] -new Field ( ) ; fields [ 0] . setName ( "resetType"); fields [O] . setValue ("ModemPreserve") ;
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
133
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
ArrayOfField arrayFields = new ArrayOfField(); arrayFields. getField {) . add (fields [O]) ;
payload.setFields(arrayFields); msg . setPayload(payload);
messages. getForwardMessage () . add (rnsg) ;
// Submit messages and check Gateway's response SubmitMessagesResult submitResult = igwsSvc.subrnitForwardMessages( myAccessID, myPassword, messages);
if (submitResult != null && subrnitResult.getErrorID() == O && submitResult.getSubmissions() != null)
List<ForwardSubmission> submissionresultList = subrnitResult.getSubrnissions() .getForwardSubrnission(); for(ForwardSubrnission submissioninfo: subrnissionresultList)
if (subrnissioninfo.getErrorID() OJ
System . out.println( "Message (UserID=" + submissioninfo.getUserMessageID() + ") accepted, "+ "Gateway assigned ID: "+ submissioninfo . getForward.MessageID());
else
igwsErrorHandler(submissioninfo.getErrorID(), "submitForward.Messages for"+ submissioninfo.getUserMessageID() );
else if (submitResult != null)
igwsErrorHandler (submitResult. getErrorID () , "submitForward.Messages") ;
public void SubmitModernMesssagesSample() throws Exception
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
II Create array of ForwardMessage objects ArrayOfForwardMessage messages= new ArrayOfForward.Message();
// Message 1 --------------------------------�// A simple binary message (reset -see [T203] for more details)
ForwardMessage msg = new Forward.Message(); msg . setDestinationID(mobileID) ; msg.setUserMessageID{Biginteger.valueOf(l)); rnsg.setRawPayload(new byte[] { 0x00 , 0x44 , 0x00 }) ;
messages. get Forward.Message () . add (msg) ;
II Message 2 --------------------------------�// A simple customer specific message in a binary format. In case a customer defined II a message where SIN=l28 and a content of 8 bytes, this would be a way to send
// it in a binary form. The first byte is SIN and the rest is its content.
msg = new ForwardMessage() ; msg.setDestinationID(mobileID) ; msg.setUserMessageID(Biginteger . valueOf(2)); msg . setRawPayload(new byte[] { (byte)0x80 , 0x0l, 0x02, 0x03 , 0x04 ,
0x0S, 0x06, 0x07, 0x08}); messages. getForwardMessage () . add (msg) ;
// Submit messages and check Gateway's response SubmitMessagesResult submitResult = igwsSvc.submitForwardMessages( myAccessID, myPassword, messages) ;
if (submitResult != null && submitResult.getErrorID(l == 0 && submitResult.getSubmissions() != null)
List<ForwardSubmission> submissionresultList = submitResult.getSubmissions() .getForwardSubmission() ; for(ForwardSubmission submissionlnfo: submissionresultList)
if (submissioninfo.getErrorID() OJ
System.out.println("Message (UserID=" + submissioninfo.getUserMessageID(l + ") accepted,"+
"Gateway assigned ID: "+ submissioninfo . getForward.MessageID());
else
igwsErrorHandler(submissioninfo.getErrorID(),
"subrni tForwardMessages for " + subrnissioninfo. getUserMessageID () ) ;
else if (submitResult != null)
igwsErrorHandler (subrnitResul t. getErrorID () , "submitForwardMessages") ;
private void stopPolling()
pollingThread . interrupt() ;
File: Main.java
import java.util.concurrent.* ;
public class Main {
public static void rnain(String[] args)
try
IDPGatewayClient client new IDPGatewayClient() ; client . Init(); // Poll the IDP Gateway for 30 seconds client . StartPolling(); TimeUnit.SECONDS.sleep(30); client . StopPolling();
catch (Exception e)
System . out . println(e);
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 136
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
131
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE

APPENDIX G SAMPLE REST WEB SERVICE CLIENT IN JAVA
// File: Main . java import java . util.concurrent . * ;
public class Main {
public static void main(String[] args)
try
// REST IGWS client IGWSRestClient restClient = new IGWSRestClient(); restCl1ent . JsonigwsCl1entSample_GetReturnMessages ();
catch (Exception e)
System.out . println(e);
// File IGWSRestClient . java
import java . io . BufferedReader; import java . io.InputStreamReader; import java.net . URI ;
import org . apache . http . HttpResponse ; import org . apache . http . client.HttpClient; import org . apache.http . client . methods . HttpGet ; import org . apache.http . irnpl.client.HttpClientBuilder;
import com . fasterxml.jackson . databind . ObjectMapper;
import restclient . GetForwardStatusesResult; import restclient . GetReturnMessagesResult ;
public class IGWSRestClient
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
final static String gwHos t = �i s atdatapro .swlab.ca�; final static int gwPort = 8143 ; final static String gwRestBasePath "/GLGW/2/Res tMessages.svc/JSON/";
final static String myAcces sID "70000934 "; final static String myPassword "password";
public void JsonigwsClientSample_GetForwardStatuses ()
try
String authentication= "access_id=" + myAccessID + "&password=" + myPassword; String highWatermark = "&start_utc=2016-10-21 14:45:00"; String opName = "get_forward_statuses/ ";
URI getFwStatusesURI = new URI("https", null, gwHost, gwPort, gwRestBasePath+opName, authentication+highWatermark,
null) ;
HttpClient client= HttpClientBuilder.create() .build() ; HttpGet request= new HttpGet (getFwStatusesURI) ;
HttpResponse response= client.execute(request) ; BufferedReader rd= new BufferedReader (new InputStreamReader (response.getEntity() .getContent () )) ; String inputStr; StringBuilder responseStrBuilder new StringBuilder() ;
while ( ( inputstr = rd. readLine ()) != null) responseStrBuilder .append (inputStr) ;
II Object mapper instance ObjectMapper mapper= new ObjectMapper() ;
II Convert JSON to a Java object String json = responseStrBuilder . toString() ; GetForwardStatusesResult restResponse = mapper . readValue(json, GetForwardStatusesResult . class) ; if(restResponse != null)
II Handle the response . ..
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
catch(Exception ex) { System . out.println(ex);
public void JsonigwsClientSample_GetReturnMessages()
try
String authentication= "access_id=" + myAccessID +"&password="+ myPassword; String highWatermark = "&start_utc=2016-10-21 14:45:00&include raw_payload=true"; String opName = "get_return_messages/" ;
URI getFwStatusesURI = new URI("https", null, gwHost , gwPort, gwRestBasePath+opName, authentication+highWatermark,
null);
HttpClient client= HttpClientBuilder.create() .build() ; HttpGet request= new HttpGet (getFwStatusesURI) ;
HttpResponse response= client . execute(request) ; BufferedReader rd= new BufferedReader (new InputStreamReader(response . getEntity() . getContent() )) ; String inputStr; StringBuilder responseStrBuilder new StringBuilder() ;
while ( ( inputstr = rd. readLine ()) != null) responseStrBuilder.append (inputStr) ;
// Object mapper instance ObjectMapper mapper= new ObjectMapper() ;
// Convert JSON to a Java object String json = responseStrBuilder . toString() ;
GetReturnMessagesResult restResponse mapper . readValue(json, GetReturnMessagesResult . class); if(restResponse != null)
// Handle the response ...
catch(Exception ex) {
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 140
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
System.out.println(ex) ;
// File GetReturnMessagesResult . java package restclient;
public class GetReturnMessagesResult
public int ErrorID = 0 ; public String NextStartUTC = null ; public ReturnMessage[] Messages= null;
public GetReturnMessagesResult()
public GetReturnMessagesResult(int ErrorID,
super() ;
this.ErrorID = ErrorID; this.NextStartUTC = NextStartUTC; this.Messages= Messages;
// File ReturnMessage.java package restclient;
public class ReturnMessage
public long ID -0; public String MessageUTC public String ReceiveUTC
1111,
public int SIN; public String MobileID;
, JI:.\ N210, Version 03
String NextStartUTC, ReturnMessage[] Messages)
ISATDATA PRO GATEWAY WEB SERVICE 2 -USER GUIDE
public byte[] RawPayload; public Message Payload= null; public String RegionName; public int OTAMessageSize; public int CustomerID; public int Transport;
public ReturnMessage()
public ReturnMessage(long ID, String MessageUTC, Message Payload, String RegionName, int
super() ;
this. ID -ID;
this .MessageUTC MessageUTC; this . ReceiveUTC ReceiveUTC; this . SIN= SIN; this .MobileID = MobileID; this . RawPayload = RawPayload; this .Payload= Payload; this . RegionNarne = RegionNarne ; this . OTAMessageSize = OTAMessageSize; this . CustornerID = CustornerID; this . Transport= Transport;
// File Message . java package restclient;
public class Message
public String Name= public int SIN 0; public int MIN 0; public String IsForward
, JI:.\ N210, Version 03
String ReceiveUTC, int SIN, String MobileID, byte[] RawPayload, OTAMessageSize, int CustomerID, int Transport)
//public ArrayOfField Fields= null; public Field[] Fields= null;
public Message()
public Message(String Name, int SIN, int MIN, String IsForward, Field[] Fields)
super ();
this . Fields= Fields; this . Name= Name; this.SIN SIN;
this . MIN MIN;
this . IsForward = IsForward;
// File Field . java package restclient;
public class Field
public Element[] Elements= null; public Message Message= null; public String Name="'' ; public String Value= ''"; public String Type=
public Field I)
public Field(Element[] Elements, Message Message, String Name, String Value, String Type)
super() ;
this . Elements= Elements; this .Message= Message; this . Name= Name; this.Value= Value ; this . Type= Type;
// File: Element.java package restclient;
public class Element
public Field[] Fields null; public Integer Index;
public Element()
public Elernent(Field[] Fields, Integer Index )
super() ;
this . Fields= Fields;
this.Index= Index ;

APPENDIX H INTERFACE CODE DESCRIPTION
This section provides an overview of the IGWS 2 sample client application code.
Sample code provided in the ORBCOMM Developer Toolkit contains C# and Java samples that interface with the IGWS 2 SOAP interface.
After installing the ORBCOMM Developer Toolkit using the default installation path, the following compressed sample code1 can be found in the ORBCOMM Developer Toolkit:
�
C# SOAP Sample.zip -Compressed C#/.NET sample code

�
Java Sample.zip -Compressed Java sample code


C# .NET SOAP Client Sample
The C# sample code can be extracted from the C# SOAP Sample.zip file. It shows developers how to:
�
Initialize the IGWS 2 client

�
Get account information

�
Submit to-mobile messages

�
Poll the web service for from-mobile messages

�
Poll the web service for to-mobile message status updates


Requirements
The following tools are required to develop a client sample:
�
Installed Microsoft� .NET Framework 4.5 and Microsoft Visual Studio� 2015 or higher.

�
Valid lsatData Pro gateway account



Getting Started
Before you can connect to the IGWS 2 you need to update the Program.cs file with your account information:
�
AccesslD field of the WebServiceAccount: Set it to your IGWS 2 account's access ID

�
Password field of the WebServiceAccount: Set it to your IGWS 2 account's password

�
MobileID1 field of the WebServiceAccount: Enter a valid mobile ID from your IGWS 2 account.

�
MobileID2 field of the WebServiceAccount: Enter a valid mobile ID from your IGWS 2 account.


Java SOAP Client Sample
The Java sample code can be extracted from the Java Sample.zip file. It shows developers how to:
1Actual code/file names may vary.
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020 145
�
Generate Java proxy classes from the web service's WSDL file

�
Initialize the IGWS 2 client

�
Get account information

�
Submit to-mobile messages

�
Poll the web service for from-mobile messages

�
Poll the web service for to-mobile message status updates


Requirements
The following tools are required to develop a client sample:
�
Installed Java SDK 1.6.25

�
Valid lsatData Pro gateway account



Getting Started
Update all relevant paths in all the .bat files and then update the Main.Java file with your account information:
�
accesslD field: Set it to your IGWS 2 account's access ID

�
password : Set it to your IGWS 2 account's password

�
mobilelD: Enter a valid mobile ID from your IGWS 2 account.


Generating IGWS Proxy Classes
To update generated Java IGWS proxy classes, run CreateProxy.bat. It executes standard Java SDK's wsimport utility.

, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
146




APPENDIX I COMMON ISSUES
� Errors related to 'maximum message size quota' exceptions
This section deals with cases when a client application encounters an exception with the following (or similar) content: An unhandled exception of type 'System.ServiceModel.CommunicationException' occurred in mscorlib.dll Additional information: The maximum message size quota for incoming messages (65536) has been exceeded . To
increase the quota, use the MaxReceivedMessageSize property on the appropriate binding element. The lsatData Pro gateway sets its MaxRecivedMessageSize to 2147483647, but that is not enough. The client-side
code needs to set the limit as well. How to do it depends on the implementation of the client application, but the following links could point you to the right direction. https://msdn.microsoft.com/en�
us/library/system.servicemodel.httpbindingbase.maxreceivedmessagesize%28v=vs.110%29.aspx?f=255&MSPPError =-2147217396 https://msd n .m icrosoft.com/en-us/I ibrary/ system .net. http. http cl ient.maxrespon secontentbuffersize(v=vs.11 8) .aspx http://stackoverflow.com/guestions/19365206/setting-maxreceivedmessagesize-in-the-client-of-a-wcf-rest-service https://answers.atlassian.com/guestions/8829/how-can-i-increase-the-soap-data-size-limit-of-65536
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
147
APPENDIX J WEB SERVICE INTERFACE CHANGES BETWEEN IGWS AND IGWS 2
The following list presents the most important changes between IGWS and IGWS 2:
�
New UR Ls of web service interface IGWS 2.

�
Definition and default settings for the GET and SUBMIT frequency limits have changed in IGWS 2.

�
Removed the option to query for from-mobile messages using message ID. For performance and simplicity reasons, only one, time-based high watermark is used in the new web service interface.

�
New web service method for getting from-mobile messages from all subaccounts: GetSu baccou ntsRetu rn Messages().

�
Added more properties to message and terminal information classes.

�
Removed ability to use the web service over HTTP. Only HTTPS access is allowed for IGWS 2.

�
Added an option to specify a transport when submitting a to-mobile message (satellite vs cellular).

�
Added an option for delayed send of to-mobile messages. By default, an account is not permitted to set this option. Contact Customer Support if you wish to have the permission. This option is for sending to-mobile messages to the type of terminal that is powered down most of the time but will send from-mobile message(s) after it powers on.

�
Improved message query performance in version 2by using extensive message caching .

�
The type of the UserMessagelD and the Gateway generated message ID has changed to unsigned long in IGWS 2.

�
Enum definition of message state has been removed in IGWS 2.

�
Web service operation changes:

�
IGWSlnformation(), GetTerminalslnfo() and GetSubaccountsReturnMessages(): New operations.

�
lnfoErrorlnfos(): Removed. Merged into IGWSlnformation().

�
lnfoUTC(): Removed. Merged into IGWSlnformation().

�
lnfoVersion(): Removed. Merged into IGWSlnformation().

�
GetMobilesPaged(): Removed. Replaced by GetTerminalslnfo().



�
Class changes:

�
IGWSlnformationResponse, GetTerminalslnfoResult, Terminallnfo and DelayedSend: New classes.

�
GetMobilespagedResult: Removed. Replaced by GetTerminalslnfoResult.

�
MobileExlnfo: Removed. Replaced by Terminallnfo.

�
ForwardSubmission: Removed property StateUTC.

�
Forward Message: Added property SendOptions and TransportType.

�
ForwardStatusFilter: Removed property EndUTC.

�
ForwardStatus: Added property Transport. Removed enum definition for property State.

�
ForwardMessageRecord: Added property Transport.

�
GetForwardStatusesResult: Removed property More.

�
ReturnMessageFilter: Removed property StartMessagelD, lncludeAIISubaccounts, EndUTC, and MobilelD

�
GetReturnMessageResult: Removed property More and NextStartlD.

�
Return Message: Added property CustomerlD. The type of property ID has changed to unsigned long.




, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
14s


ACRONYMS GLOSSARY
Broadcast ID
Forward message GPS
IGWS2 1/0 mobile ID
OTA Polling
Return message Rx SOAP Subaccounts
Tx
UTC

WSDL
A broadcast ID is globally unique and follows the numbering scheme NNNNNNNNGRPXXXX, where NNNNNNNN is a number assigned by ORBCOMM.
A message sent to the terminal. Often referred to as a to-mobile message. Global Positioning System. A satellite-based system that allows the terminal to determine the longitude and latitude (and hence the location) of a monitored asset such as a truck or a ship.
lsatData Pro Gateway Web Service 2 inpuVoutput A single identification sequence that appears on the terminal as NNNNNNNNSKYXXXX,
where NNNNNNNN is a number assigned by ORBCOMM. over-the-air A poll is an information request sent to the terminal from the client application. The poll may
be a request for GPS position or for the state of the terminal's 1/0 (inpuVoutput) ports, or both. Polling is always driven by the user's application. A message sent from a terminal. Often referred to as a from-mobile message. receive Simple Object Access Protocol Other users Gateway terminal accounts to which the client has access.
transmit Coordinated Universal Time -All time stamps exchanged between the client and the Gateway use the following format
YYYY-MM-DD hh:mm:ss Web Services Description Language
, JI:.\ N210, Version 03 ORBCOMM� PROPRIETARY AND CONFIDENTIAL MATERIAL� Jun 2020
149
